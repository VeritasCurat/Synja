#Gibt einen Hinweis fuer die Loesung eines Fehlers
lesson: programm_structure
"programm_structure_main":::"main_wrong":::"Try to build your main method like this: <b>public static void main(String a[]){}</b>"
"programm_structure_import":::"import_no_keyword":::"Your import declaration must contain the keyword "import"."
"programm_structure_import":::"import_wrong_semicolon":::"You import declaration must end with a semicolon."
"programm_structure_import":::"import_error_wildcard":::"If the import declaration contains a wildcard, it can only be at the end and there can only be one."
"programm_structure_import":::"import_wrong_structure":::"You should write the import declaration like this: the keyword "import" then a path to the import data and then a semicolon."
"programm_structure_import":::"import_identifier":::"Please use a valid identifier(s). For the beginning lets say that these are just names (a sequence of letters)."
"programm_structure_packages":::"package_no_keyword":::"Use the keyword "package" for a package declaration."
"programm_structure_packages":::"package_wrong_semicolon":::"End your package declaration with a semicolon."
"programm_structure_packages":::"package_indentifier":::"Use identifiers in your package declaration. Identifiers must be written with letters. For example: "source""
"programm_structure_packages":::"package_wrong_structure":::"A package declaration consists of a keyword, then a path to a java file and then a semicolon.
lesson: basics
"identifiers":::"identifiers_digit":::"If you write a identifier, it cannot start with a digit."
"identifiers":::"identifiers_keyword":::"You can't use keywords as identifiers (abstract, continue, for, new, switch, assert, default, if, package, synchronized, boolean, do, goto, private, this, break, double, implements, protected, throw, byte, else, import, public, throws, case, enum, instanceof, return, transient, catch, extends, int, short, try, char, final, interface, static, void, class, finally, long, strictfp, volatile, const, float, native, super and while)."
"identifiers":::"identifiers_null_boolean":::"Write a string that is not equal to "true", "false" or "null"."
"identifiers":::"identifiers_nonletter":::"A identifier cannot contain a character that is not a letter."
"keywords":::"keyword_non":::"Keywords are: abstract, continue, for, new, switch, assert, default, if, package, synchronized, boolean, do, goto, private, this, break, double, implements, protected, throw, byte, else, import, public, throws, case, enum, instanceof, return, transient, catch, extends, int, short, try, char, final, interface, static, void, class, finally, long, strictfp, volatile, const, float, native, super and while."
"character_literals":::"char_literal_non":::"A character literal is every character, that is written like this: 'a'."
"boolean_literals":::"boolean_literals_non":::"The boolean literals are true and false."
"null_literal":::"null_literal_non":::"The null literal / empty value is written like this: null."
"literals":::"literal_non":::"A literal is either a integer, float, character, String, boolean or a null literal."
"string_literals":::"string_literals_non":::"A string literal is a sequence of characters."
"integer_literals":::"integer_literal_non":::"An integer literal must look like a number."
"integer_literals":::"integer_literals_binary_not_empty":::"A binary integer must at least have on 0 or 1."
"integer_literals":::"integer_literals_non_binary":::"A binary integer can only consist of the digits 0 and 1. It starts with a 0b."
"integer_literals":::"integer_literals_hex_not_empty":::"A hexadecimal integer must at least have character that is in ther range 0-9 or A-F."
"integer_literals":::"integer_literals_non_hex":::"A hexadecimal integer can consist of the digits (0-9) and the letters A,B,C,D,E and F. It starts with a 0x."
"integer_literals":::"integer_literals_non_octal":::"A hexadecimal integer can consist of the digits 0,1,2,3,4,5,6 and 7."
"integer_literals":::"integer_literals_non_decimal":::"A decimal integer can consist of the digits (0-9)."
"integer_literals":::"integer_literals_byte_oor":::"The range for byte, goes from -128 to 127."
"integer_literals":::"integer_literals_short_oor":::"The range for short, goes from -32768 to 32767"
"integer_literals":::"integer_literals_int_oor":::"The range for int, goes from -2147483648 to 2147483647."
"integer_literals":::"integer_literals_long_oor":::"The range for long, goes from -9223372036854775808 to 9223372036854775807."
"integer_literals":::"integer_literals_char_oor":::"The range for char, goes from '\u0000' to '\uffff' for unicode characters, that is, from 0 to 65535."
"floating-point_literals":::"float_literals_no_point":::"A float literal must contain a '.' between to integer literals. Example: 0.9"
"floating-point_literals":::"float_literals_wrong_prefix":::"float literal can only start with a digit, "0b" or "0x"."
"floating-point_literals":::"float_literals_wrong_structure":::"A float literal starts with a optional integer literal, then comes a point and last an integer literal again. For example: 3.14"
"string_literals":::"string_literal_non":::"A string literal starts with a " and and with a ". For example: "Test"."
"comments":::"comments_non":::"A comment must contain /**/ or //. For example: "/*comment*/" or "//comment""
"comments":::"comments_singleline_wrong_structure":::"A single line begins with a // and it includes only one line. For example: "//single-line comment\n//another single-line comment\n"."
"comments":::"comments_multiline_wrong_structure":::"A multiline line comment must begins with a "/*" and end with a "*/". For example: "/*\nmulti\nline\ncomment\n*/"."
"types":::"types_non":::"Valid types are byte, short, int, long, float, double, boolean, char, String and user defined types."
"variable_definition_initialization":::"variable_definition_initialization_wrong_semicolon":::"A variable definition and initialization must end with a semicolon."
"variable_definition_initialization":::"variable_definition_initialization_non_type":::"A variable_definition and initialization must contain a primitive type or a user defined type."
"variable_definition_initialization":::"variable_definition_initialization_non_identifier":::"A variable name must be a valid identifier."
"variable_definition_initialization":::"variable_definition_initialization_name_double":::"A variable name must always be unique. That means different variables must have different names."
"variable_definition_initialization":::"variable_definition_initialization_typemismatch_integer":::"The type in the variable definition must match with the type of the assigned value (integer)."
"variable_definition_initialization":::"variable_definition_initialization_typemismatch_float":::"The type in the variable definition must match with the type of the assigned value (float)."
"variable_definition_initialization":::"variable_definition_initialization_typemismatch_boolean":::"The type in the variable_definition must match with the type of the assigned value (boolean)."
"variable_definition_initialization":::"variable_definition_initialization_typemismatch_char":::"The type in the variable definition must match with the type of the assigned value (char)."
"variable_definition_initialization":::"variable_definition_initialization_typemismatch_string":::"The type in the variable definition must match with the type of the assigned value (String)."
"variable_definition_initialization":::"variable_definition_initialization_typeclass_no_new":::"The variable definition and initialization must contain the keyword new, if a user defined type is declared."
"variable_definition_initialization":::"variable_definition_initialization_typemismatch_class":::"The type at left site must match the the type used at the right site."
"variable_definition_initialization":::"variable_definition_initialization_contructor_parameter_mismatch":::"The parameters dont match the parameters defined in the constructor."
"variable_definition_initialization":::"variable_definition_initialization_contructor_parameter_mismatch_len":::"The parameters number of parameters in the constructor definition don't match the number of parameters defined in the constructor: $"
"variable_definition":::"variable_definition_initialization_wrong_structure":::"A variable definition and initialization is a variable definition (without a semicolon) followed by an assignment;"
"variable_definition":::"variable_definition_wrong_structure":::"The right structure for a variable definition is: variabletype variablename;."
"variable_definition":::"variable_definition_non_identifier":::"The variablename needs to be a valid identifier."
"variable_definition":::"variable_definition_name_double":::"This variable name has already been claimed. Use another one."
"variable_definition":::"variable_definition_wrong_semicolon":::"A variable_definition end with a ;."
"variable_definition":::"variable_definition_non_type":::"A variable_definition needs to have known type. For example: int."
"variable_definition":::"variable_definition_contructor_parameter_mismatch":::"The parameters dont match the parameters defined in the constructor." 
"variable_access":::"variable_access_wrong_structure":::"A variable access consist of the variablename."
"variable_access":::"variable_access_unknown":::"A variable must always be defined before accessed. Then it can be accessed by it's name."
"variable_reassignment":::"variable_reassignment_wrong_structure":::"A variable reassignment must look like this: variable_name assignment_operator value;"
lesson: operators
"class_and_method_operators":::"memberaccess_wrong_structure":::"A member access must look like this: class.member."
"class_and_method_operators":::"member_access_non_member":::"You can only access members that are listed in the class definition."
"operators_prefix":::"preincdec_no_operator":::"The ++ or -- operator must be used. For example ++var;, if var is a integer variable."
"operators_prefix":::"preincdec_wrong_type":::"Only integer types are allowed for ++ or --. For example ++a; if a is a int variable."
"operators_prefix":::"preincdec_wrong_structure":::"A prefix operation must be build like this: a prefix operator (++ or --) and then a literal, variable_access, array access or method access with the returning type integer and last a semicolon."
"operators_postfix":::"postincdec_no_operator":::"The ++ or -- operator must be used. For example: a++;, if a is a integer variable."
"operators_postfix":::"postincdec_wrong_type":::"Only integer types are allowed for ++ or --. For example: c--;, if c is a integer variable."
"operators_postfix":::"postincdec_wrong_structure":::"Right build for a postfix operation: A literal, variable access, array access or method access with a returning integer type, then a postfix operator (++ or --) and last a semicolon."
"logic_operators":::"logic_operators_no_operator":::"The ||, && or ! operator must be used. For example: true || false."
"logic_operators":::"logic_operators_wrong_numops":::"This has the wrong number of operands. && and || should have 2 operands and ! should have one operand."
"logic_operators":::"logic_operators_wrong_type":::"Operands of logic operators need to be boolean. For example: true."
"logic_operators":::"logic_operators_wrong_structure":::"Operands of logic operators need to be boolean. For example: 3<10."
"comparison_operators":::"comparison_operators_no_operator":::"The <,<=,>,>=,== or != operator must be used."
"comparison_operators":::"comparison_operators_wrong_numops":::"There need to be 2 operands."
"comparison_operators":::"comparison_operators_wrong_type":::"Operands of comparison operators need to be integer or the same type if compared by == or !=."
"comparison_operators":::"comparison_operators_wrong_structure":::"Operands of comparison operators need to be integer or the same type if compared by == or !=."
"arithmetic_operators":::"arithmetic_operators_no_operator":::"The +,-,*,/ or % operator must be used."
"arithmetic_operators":::"arithmetic_operators_wrong_numops":::"There need to be 2 operands."
"arithmetic_operators":::"arithmetic_operators_wrong_type":::"Use operands that are of int, float or string type (for +). For example: 3+4"
"arithmetic_operators":::"arithmetic_operators_wrong_structure":::"Use operands that are of int, float or string type (for +). For example: "hello"+" world!"."
"assignment_operators":::"assignment_operators_no_operator":::"Use one of these operands: -=,+=,/=,%=,<<=,>>=,>>>=,&=,^=, or |=. For example: a += 3; (if a is a integer var)."
"assignment_operators":::"assignment_operators_badLType":::"Use a variable as the left operator."
"assignment_operators":::"assignment_operators_wrong_numops":::"There need to be 2 operands."
"assignment_operators":::"assignment_operators_wrong_type":::"Operands of assignment operators need to be integer or float types."
"assignment_operators":::"assignment_operators_wrong_structure":::"Operands of assignment operators need to be integer or float types."
"bitwise_operators":::"bitwise_operators_wrong_numops":::"There need to be 2 operands."
"bitwise_operators":::"bitwise_operators_no_operator":::"Use the |, & or ~ operator. For example: ~3."
"bitwise_operators":::"bitwise_operators_wrong_type":::"Use operands that are of integer type. For example 12."
"bitwise_operators":::"bitwise_operators_wrong_structure":::"The structure of a bitwise operation is: operand op operand for | and &, or it is: op operand for ~."
lesson: statements
"expressions":::"expression_non":::"A expression is made up of variables, arrays, operators, and method invocations."
"statements":::"statement_non":::"A statement is a array or variabledefinition, -initialisation or -access or a methodaccess. For example printing out an 8 with System.out.println(8); is a statement. It can also be a variable- or array assignment."
"statements":::"statement_wrong_semicolon":::"End a statement with a semicolon. For example: int a=9<b>;</b>"
"code_blocks":::"codeblock_no_brackets":::"A codeblock must be wrapped with { and }. For example: {int a; int b}"
"code_blocks":::"codeblock_no_statement":::"A codeblock must only contain statements."
lesson: controll_structures
"boolean_expression":::"boolean_expression_non":::"A boolean expression must be evaluated to true or false. For example true || 3<5 (true is a boolean literal and 3<5 is equal to true. || is a boolean operator. Therefore true || 3<5 is a boolean expression)."
"if":::"if_no_keyword":::"Use the keyword if."
"if":::"if_brackets_not_matching":::"A closing round bracket must be followed at some point on each opening round bracket."
"if":::"if_no_boolean_expression":::"Every if statement must have a boolean expression inside it's round brackets. For example: if(2*2 < 9);"
"if":::"if_non_statement":::"After the boolean expression must either follow a valid statement or a block of code. For example: System.out.println("Test");"
"if":::"if_non_codeblock":::"After the boolean expression must either follow a valid statement or a block of code. For example: {}"
"if":::"if_wrong_structure":::"The if statement consists of 1. the keyword if, 2. a boolean expression in round bracket, and 3. last a statement or a block of code. For example: if(true){/*do something*/}"
"while":::"while_no_keyword":::"Every while loop must contain the keyword while. For example: while(true);"
"while":::"while_brackets_not_matching":::"A closing round bracket must be followed at some point on a opening round bracket. For example: while((true));"
"while":::"while_no_boolean_expression":::"Every while statement must have a boolean expression inside round brackets."
"while":::"while_non_statement":::"After the boolean expression must either follow a statement or a block of code."
"while":::"while_non_codeblock":::"After the boolean expression must either follow a statement or a block of code."
"while":::"while_wrong_structure":::"The while statement consists of first: the keyword while, second: a boolean expression in round bracket, and third: last a statement or a block of code."
"while":::"while_break":::"The break statement can only be used one time. For example: while(true)break;"
"while":::"while_continue":::"The continue statement can only be used one time: while(true){if(a==0)continue;}"
"do_while":::"do_while_wrong_semicolon":::"Use a ; after the boolean expression to complete the loop. For example: do{}while(true);"
"do_while":::"do_while_no_keyword":::"Every do while loop must contain the keywords do and while."
"do_while":::"do_while_round_brackets_not_matching":::"A closing round bracket must be followed at some point on a opening round bracket. For example: do{}while(((false)));"
"do_while":::"do_while_curly_brackets_not_matching":::"A closing curly bracket must be followed at some point on a opening curly bracket. For example: do{{}}while(false);""
"do_while":::"do_while_no_boolean_expression":::"Every do while statement must have a boolean expression inside it's round brackets."
"do_while":::"do_while_non_codeblock":::"After the boolean expression must either follow a statement or a block of code."
"do_while":::"do_while_wrong_structure":::"The do while statement consists of first: the keyword do, second: a code block, third: the keyword while and fourth: a boolean expression in round bracket and last a semicolon."
"do_while":::"do_while_break":::"The break statement can only be used one time. For example: do{break;}while(true);"
"do_while":::"do_while_continue":::"The continue statement can only be used one time. do{continue;}while(3>2);"
"switch":::"switch_no_keyword":::"Every switch statement must contain the keyword switch."
"switch":::"switch_round_brackets_not_matching":::"A closing round bracket must be followed at some point on a opening round bracket. For example: switch((a)){} (a is a integer variable)"
"switch":::"switch_curly_brackets_not_matching":::"A closing curly bracket must be followed at some point on a opening curly bracket. For example: switch(q){case 0: break;} (b is a char variable)"
"switch":::"switch_non_variable":::"Inside the round brackets must be a variable of the type: char, byte, short, int, byte, String. For example: switch(c){} (c is a int variable)."
"switch":::"switch_wrong_default":::"A default case must be build like this: default: {/*code block*/} or default: /*statement*/"
"switch":::"switch_wrong_case":::"A case must be build like this: case value: {/*code block*/} or case value: /*statement*/"
"switch":::"switch_varval_mismatch":::"Variabletype and value must matching. For example: switch(S){case "tom": break;} (S is a String)"
"switch":::"switch_wrong_structure":::"The switch statement consists of first: the keyword switch, second: a matching variable enclosed in round brackets, third: a codeblock with cases (and optional default case)."
"switch":::"switch_break":::"The break statement can only be used one time per case."
"extended_for":::"extended_for_no_keyword":::"Every extended for statement must contain the keyword for."
"extended_for":::"extended_for_wrong_structure":::"A extended for statement consist of the 3 main parts. First the for keyword, Second: the head, Third: a code block. The head is build like this: variable_definition: array."
"extended_for":::"extended_for_no_variable_definition":::"There must be a variable defintion inside the round brackets. For example: "int a" for going through a int array."
"extended_for":::"extended_for_nonarray":::"There must be a an access of an existing array inside the round brackets."
"extended_for":::"extended_for_varar_mismatch":::"The array and the variable definition inside the round bracket must be of the same type. For example: "String s" for going through the String array S."
"extended_for":::"extended_for_break":::"The break statement can only be used one time."
"extended_for":::"extended_for_continue":::"The continue statement can only be used one time."
"extended_for":::"extended_for_noncode_block":::"You must use a valid code block or a valid statement."
"extended_for":::"extended_for_nonstatement":::"You must use a valid code block or a valid statement."
"for":::"for_no_keyword":::"Every for statement must contain the keyword for."
"for":::"for_wrong_structure":::"A for statement consist of the 3 main parts. First the for keyword, Second: the head, Third: a code block or a statement. The head consist of the 3 parts which are all optional: first: a variable definition and initialization, a reassignement or just a statement, second: a boolean expression, third: a reassignment or a statement."
"for":::"for_no_variable_definition":::"There must be a variable definition, initialization or -reassignment or nothing in the first element inside the round brackets."
"for":::"for_no_boolean_expression":::"The second element in the round brackets must be empty or a boolean expression."
"for":::"for_no_increment":::"The third element needs to be empty, an assignment operation or a statement."
"for":::"for_break":::"The break statement can only be used one time."
"for":::"for_continue":::"The continue statement can only be used one time."
"for":::"for_noncode_block":::"A for statement must either have a valid code block or a valid statement."
"for":::"for_nonstatement":::"A for statement must either have a valid code block or a valid statement."
lesson: arrays
"array_definition":::"array_definition_no_brackets":::"Array definitions need to have []. For example: int[] a;"
"array_definition":::"array_definition_wrong_structure":::"A arraydefinition looks like this type[] name; or type name[];: $"
"array_definition":::"array_definition_non_identifier":::"Every array name needs to be a valid identifier."
"array_definition":::"array_definition_non_type":::"A variable definition need to have known type. For example: boolean"
"array_definition":::"array_definition_name_double":::"Every defined array needs to have a unique identifier."
"array_definition":::"array_definition_wrong_semicolon":::"A variable_definition must end with a semicolon."
"array_definition_initialization":::"array_definition_initialization_no_brackets":::"Array definitions and initializations need to have a list of values, written inside curly brackets. For example: int[] example = {1,2,3};"
"array_definition_initialization":::"array_definition_initialization_wrong_semicolon":::"A array definition must end a semicolon."
"array_definition_initialization":::"array_definition_initialization_name_double":::"Every array name needs to be unique."
"array_definition_initialization":::"array_definition_initialization_non_type":::"Wrong Type. A array definition and initialization must contain a primitive type or a user defined type."
"array_definition_initialization":::"array_definition_initialization_typemismatch_integer":::"The type in the array definition must match with the type of the assigned values (integer)."
"array_definition_initialization":::"array_definition_initialization_typemismatch_float":::"The type in the array definition must match with the type of the assigned values (float)."
"array_definition_initialization":::"array_definition_initialization_typemismatch_boolean":::"The type in the array_definition must match with the type of the assigned values (boolean)."
"array_definition_initialization":::"array_definition_initialization_typemismatch_char":::"The type in the array_definition must match with the type of the assigned values (char)."
"array_definition_initialization":::"array_definition_initialization_typemismatch_string":::"The type in the array_definition must match with the type of the assigned values (String)."
"array_definition_initialization":::"array_definition_initialization_wrong_type":::"The type in the arraydefinition must match with the type of the assigned value. For example: int a[] = {1,2} (1 and 2 are both of type int)."
"array_definition_initialization":::"array_definition_initialization_wrong_structure":::"An array definition and initialization must look like this arraydefinition without ;, then "new type[numberelements];" or {value1, ..., valueN};"
"array_definition_initialization":::"array_definition_initialization_typeclass_no_new":::"This is does not contain the keyword new."
"array_definition_initialization":::"array_definition_initialization_typemismatch_class":::"The type at left site does not match the the type used at the right site."
"array_definition_initialization":::"array_definition_initialization_contructor_parameter_mismatch":::"This is not a valid array definition and initialization. The parameters don't match the parameters defined in the constructor."
"array_definition_initialization":::"array_definition_initialization_contructor_parameter_mismatch_len":::"This is not a valid array definition and initialization. The number of parameters in the constructor definition don't match the number of parameters used in the declaration."
"array_declaration":::"array_declaration_no_brackets":::"Array declarations need to have a [ and a ]."
"array_declaration":::"array_declaration_no_new":::"Array declarations need to have the keyword new."
"array_declaration":::"array_declaration_wrong_semicolon":::"A Array declaration must end with a semicolon."
"array_declaration":::"array_declaration_name_double":::"Every array name must be a unique identifier."
"array_declaration":::"array_declaration_non_type":::"A array declaration and initialization must contain a primitive type or a user defined type. For example int: int[] a = new int[];"
"array_declaration":::"array_declaration_wrong_type":::"The type in the arraydeclaration must match with the type of the assigned value."
"array_declaration":::"array_declaration_wrong_structure":::"An array declaration must look like this: type[] name = new type[elements];"
"array_declaration":::"multidim_array_declaration_wrong_structure":::"An array declaration must look like this: type[]...[] name = new type[elements]...[elements];: $"
"array_declaration":::"multidim_array_declaration_bracketnumber_not_matching":::"An array declaration must look like this: type[]...[] name = new type[elements]...[elements];. The number of [] on the left side of the = must match the number of [] on the right side (the number of [] indicate the number of dimensions)."
"array_reassignment":::"array_reassignment_unknown_array":::"An array must be defined and declared / initialized before it can be reassigned."
"array_reassignment":::"array_reassignment_wrong_structure":::"The structure for a reassignment is: arrayname[index] = value;"
"array_reassignment":::"array_reassignment_non_type":::"A variable definition and initialization does not contain a primitive type or a user defined type."
"array_reassignment":::"array_reassignment_non_identifier":::"The array name must be a valid identifier."
"array_reassignment":::"array_reassignment_wrong_semicolon":::"A array reassignment must end with a semicolon."
"array_reassignment":::"array_reassignment_name_double":::"Every array name must be unique."
"array_reassignment":::"array_reassignment_wrong_type":::"The type in the array definition does not match with the type of the assigned value. For example if a is a int array: a[0] = 9; is right, because 9 is of int type."
"array_reassignment":::"array_reassignment_typemismatch_integer":::"The type in the array definition must match with the type of the assigned value (integer). For example if a is a int array: a[0] = 3; is right, because 3 is of int type."
"array_reassignment":::"array_reassignment_typemismatch_float":::"The type in the array definition must match with the type of the assigned value (float). For example if a is a double array: a[0] = 3.0; is right, because 3.0*2.1 equal 6.3 and that is a double literal."
"array_reassignment":::"array_reassignment_typemismatch_boolean":::"The type in the array definition must match with the type of the assigned value (boolean). For example if a is a boolean array: a[0] = 3<2; is right, because 3<2 is of boolean type."
"array_reassignment":::"array_reassignment_typemismatch_char":::"The type in the array definition must match with the type of the assigned value (char). For example if a is a int array: a[0] = 'a'; is right, because 'a' is of char type."
"array_reassignment":::"array_reassignment_typemismatch_string":::"The type in the array definition must match with the type of the assigned value (String). For example if a is a String array: a[0] = "element"; is right, because "element" is of String type."
"array_reassignment":::"array_reassignment_typeclass_no_new":::"The array definition and initialization must contain the keyword new, if a user defined type is declared."
"array_reassignment":::"array_reassignment_typemismatch_class":::"The type at left site must match the the type used at the right site."
"array_reassignment":::"array_reassignment_contructor_parameter_mismatch":::"The parameters don't match the parameters defined in the constructor."
"array_reassignment":::"array_reassignment_contructor_parameter_mismatch_len":::"The number of parameters in the constructor definition don't match the number of parameters used in the declaration."
"array_reassignment":::"array_reassignment_wrong_dim":::"The index in the array reassignment must match the range in the array declaration."
"array_access":::"array_access_wrong_structure":::"An array access consist of two parts: array name and then a valid index enclosed by []. For example: ar[2]."
"array_access":::"array_access_unknown_array":::"Every array that you want to access must first be defined and initialized / declared."
"array_access":::"multidim_array_access_unknown_array":::"Every array that you want to access must first be defined and initialized / declared."
"array_access":::"array_access_no_declaration":::"Every array that you want to access must first be defined and initialized / declared."
"array_access":::"array_access_outofrange":::"Invalid index. The index is smaller than 0 or bigger than the size of the array."
"multidim_array_definition":::"multidim_array_definition_no_brackets":::"A multidimensional array definition must contain []."
"multidim_array_definition":::"multidim_array_definition_wrong_semicolon":::"A multidimensional array definition must end with a semicolon."
"multidim_array_definition":::"multidim_array_definition_name_double":::"Every array must have a unique name."
"multidim_array_definition":::"multidim_array_definition_non_identifier":::"The array name must be a valid identifier."
"multidim_array_definition":::"multidim_array_definition_non_type":::"This array definition does to have a primitive type or a user defined type."
"multidim_array_definition":::"multidim_array_definition_wrong_structure":::"A arraydefinition looks like this "type[]...[] name;" or "type name[]...[];""
"multidim_array_declaration":::"multidim_array_declaration_bracketnumber_not_matching":::"The number of square brackets on the left side must match the number of square brackets on the left side: $"
"multidim_array_declaration":::"multidim_array_declaration_wrong_structure":::"The structure of the array declaration is wrong. It must look like this: type[]...[] name= new type[dimension1]...[dimensionN];: $"
"multidim_array_access":::"multidim_array_access_unknown_array":::"Every array that is accessed, must first be defined and declared."
"multidim_array_access":::"multidim_array_access_no_declaration":::"Every array that is accessed, must first be defined and declared."
"multidim_array_access":::"multidim_array_access_outof_dim":::"An array can only be accessed with the correct indezes. For example: the array int a[][] = new int [2][2]; can only be accessed with the following indezes: a[0][0], a[0][1], a[1][0] or a[1][1]."
"multidim_array_access":::"multidim_array_access_wrong_structure":::"An array access looks like this arrayname[dimension1]...[dimensionN]. For example a[0][0] for the two dimensional array a."
"multidim_array_access":::"multidim_array_access_oof":::"Every index in an array reassignment must be above 0 and below the range defined in the array declaration."
"multidim_array_reassignment":::"multidim_array_reassignment_unknown_array":::"Every array that you want to access must first be defined and initialized / declared."
"multidim_array_reassignment":::"multidim_array_reassignment_no_declaration":::"The array was defined, but not declared / initialized and thus cannot be used: $"
"multidim_array_reassignment":::"multidim_array_reassignment_outof_dim":::"A array reassignment must contain a valid index(<0 or >defined index)."
"multidim_array_reassignment":::"multidim_array_reassignment_wrong_structure":::"A array reassignment consist of two parts: array access and then a assignment. For example a[0][1] = 2.1;"
"multidim_array_reassignment":::"multidim_array_reassignment_oof":::"Every index in an array reassignment must be above 0 and below the range defined in the array declaration."
lesson: methods
"method_definition":::"method_definition_no_identifier":::"Method names needs to be valid identifiers."
"method_definition":::"method_definition_wrong_return":::"The type of the return needs not match the return type that is defined in the method head."
"method_definition":::"method_definition_wrong_type":::"The return type of a method can be a primitive type, a user defined type or void."
"method_definition":::"method_definition_wrong_modifier":::"Method modifier needs to be static or a access modifier (public, private or protected)."
"method_definition":::"method_definition_wrong_variable_definition":::"All variable definitions inside round brackets must be valid."
"method_definition":::"method_definition_wrong_structure":::"A method definition consist of two main parts: the head and a codeblock. The head consists of optional method modifiers, a returntype, a method name and a parameter definition. For example: void test(){}"
"method_modifiers":::"method_defintion_no_mod":::"Use one of these modifiers: public, private, protected or static."
"method_access":::"method_access_wrong_structure":::"A method access consist of a method name and after that a parameterlist and a semicolon. For example: void();"
"method_access":::"method_access_unknown_method":::"Unknown methodname. Method needs to be defined before it can be called."
"method_access":::"method_access_parameter_mismatch":::"All parameters in the method access must match with the parameter definitions in the method definition."
lesson: classes
"class_definition":::"class_definition_no_keyword":::"A class definition needs contain the keyword class."
"class_definition":::"constructor_definition_wrong_name":::"The name of the constructor needs to be the same as the name of its class."
"class_definition":::"constructor_definition_wrong_modifier":::"Wrong modifier: only public, protected and private are allowed."
"class_definition":::"constructor_wrong_structure":::"Wrong structure for constructor! The structure of a constructor is: modifier classname(parameterlist){/*code block*/}."
"class_definition":::"constructor_wrong_body":::"The body of the constructor needs to be a valid method body. For example: {}"
"class_definition":::"class_definition_no_mod":::"No modifier! Please use the modifier static, abstract or final."
"class_definition":::"class_definition_name_double":::"Every class name can only be used once."
"class_definition":::"class_definition_no_curly_brackets":::"A class definition needs contain a class body framed by curly brackets. For example: class Test{}"
"class_definition":::"class_definition_invalid_identifier":::"The class name needs to be a valid identifier."
"class_definition":::"class_definition_invalid_accessmodifier":::"The access modifiers of the class need to be valid (public, private, protected)."
"class_definition":::"class_illegal_classblock":::"A class body can only contain variable- and method definitions."
"class_definition":::"class_definition_wrong_structure":::"A class definition has the syntax: optional_access_modifier optional_modifier class name{/*optional:classmembers*/}"
"access_modifiers":::"class_definition_no_access_mod":::"Only public, private or protected are allowed."
"class_modifiers":::"class_definition_no_mod":::"There was no modifier or a wrong modifier used: $. static, abstract and final are allowed."
"inheritance":::"inheritance_non_parent":::"Every child class must have a valid parent class."
"inheritance":::"inheritance_wrong_structure":::"The right structure for an inheritance looks like this: class child_class extends parent_class{/*class_body*/}."
"member_access_variables":::"member_access_variables_unknown_object":::"Every object needs to be defined and declared before it can be accessed."
"member_access_variables":::"member_access_variables_unknown_member":::"The member variable needs to be defined in the class definition."
"member_access_variables":::"member_access_variables_wrong_structure":::"Right format to access members: object.member;"
"member_access_methods":::"member_access_methods_unknown_object":::"Every object needs to be defined and declared before it can be accessed."
"member_access_methods":::"member_access_methods_unknown_member":::"Every member method needs to be defined in the class definition before it can be used."
"member_access_methods":::"member_access_methods_wrong_structure":::"Right format: object.membermethod(parameter_list);"