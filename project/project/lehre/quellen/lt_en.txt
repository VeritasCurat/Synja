#every answer need to be put in quotations
lesson: programm_structure
"programm_structure_main":::"What is the return value of the main method?":::"public static ___ main(String a[]){}":::{"void"}
"programm_structure_main":::"":::"Every ___ must have a main method.":::{"java application"::"java app"::"java programm"::"programm"::"application"}
"programm_structure_import":::"What does a import declaration do?":::"It maps a path to a simple ___ so imports object can be used by that.":::{"name"::"reference"}
"programm_structure_import":::"Where are imports defined?":::"Import declarations must be placed at the ___ of a java file behind the package declaration.":::{"top"::"beginning"::"start"::"head"}
"programm_structure_import":::"Complete this import (something is missing at the end, that must be there in every import declaration)":::"import java.util.Random___":::{";"}
"programm_structure_packages":::"Complete this package declaration.":::"package myapplication___mylibrary;":::{"."}
lesson: basics
"comments":::"Make this code-snippet syntactically legal.":::"/___**/*/":::{"/"}
"keywords":::"Complete this keyword.":::"floa___":::{"float"}
"literals":::"Write a suitable literal.":::"int a = ___;":::{"%INTEGER%""}
"literals":::"Assign a float literal to b.":::"b = 9___2;":::{"."}
"integer_literals":::"Assign a binary integer literal.":::"int a = ___1010":::{"0b"}
"integer_literals":::"Assign a integer literal with a right type.":::"___ a = 5":::{"byte"::"short"::"int"::"long"::"char"}
"integer_literals":::"Create variable with the binary value 10.":::"int a = ___":::{"0b10;"}
"floating-point_literals":::"Assign the float value 9.8":::"int b = ___":::{"9.8F;"}
"floating-point_literals":::"Assign the double value 9.8":::"int b = ___":::{"9.8D;"}
"character_literals":::"Assign the character literal 'b'.":::"char b = ___;":::{"'b'"}
"string_literals":::"Assign the String literal "a".":::"String a = ___;":::{""a""}
"string_literals":::"Create the word "treehouse"":::"a = ___; b = "house"; c = a + b;":::{""tree""}
"boolean_literals":::"What is the value of a? (== is the equal operator)":::"boolean a = 3+5 == 4; a == ___":::{"false"}
"boolean_literals":::"What is the value of this expression? (== is the equal operator)":::"(3*3 < 9) == ___":::{"false"}
"null_literal":::"What is the value of this expression?":::"null == null":::{"true"}
"null_literal":::"Assign the empty value to a.":::"a = ___;":::{"null"}
"identifiers":::"Declare an int variable with the name a and initialize it with the value 9.":::"int ___ = 9;":::{"a"}
"types":::"":::"Non whole numbers are represented by the type(s): ___":::{"float and double"::"double and float"::"float, double"::"double, float"::"float,double"::"double,float"}
"types":::"":::"The literal true can be stored by a variable with the type ___.":::{"boolean"}
"variable_definition":::"Create a double variable with the name a.":::"___;":::{"double a"}
"variable_definition_initialization":::"Create a String with the value "jerry".":::"String name = ___;":::{""jerry""}
"variable_access":::"Access the variable var.":::"s == ___":::{"var"}
"variable_reassignment":::"Redefine the String variable "name" with the value "anna".":::"String name = "lisa"; \nname = "___";":::{""anna""}
lesson: arrays
"array_definition":::"Define a String array with 5 elements.":::"String a___":::{"[5];"}
"array_declaration":::Define and declare a int array with 10 elements.":::"int a___;":::{"[]=new int[10];"}
"array_definition_initialization":::"Define a int array with the numbers 1,2 and 3 (in this order).":::"int a[] = ___":::{"{1,2,3};"}
"array_definition_initialization":::"Define a string array with the names "bob" and "tom".":::"int a[] = {"bob",___};":::{""tom""}
"array_access":::"Access the first place of the array b.":::"int b[] = {1,2,3}; b___;":::{"[0]"}
"array_access":::"Print out "Hello Arrayworld!" by accessing all elements of b and concancatenating them with + (e.g. a[1]+a[0] for the string array a).":::"int b[] = {"Hello", " Arrayworld", "!"}; System.out.println(___);":::{"b[0]+b[1]+b[2]"}
"array_reassignment":::"Reassign the third place of a to the value 3.":::"int a[] = new int[5]; a___ = 3;":::{"[2]"}
"array_reassignment":::"Reassign the first place of c to the value "hey".":::"int c[] = new String[2]; c___ = "hey";":::{"[0]"}
"multidim_array_definition":::"Define a three-dimensional char array":::"char a___;":::{"[][][]"}
"multidim_array_declaration":::"Define and declare a two-dimensional array with 20 elements.":::"int array[][] = new int[10]___;":::{"[2]"}
"multidim_array_access":::"Access a second place of the array.":::"int array[][] = new int[10][3]; array___":::{"[0][1];"}
"multidim_array_reassignment":::"Reassign the third place of the 2x2 int array intarr.":::"intarr___ = 3;":::{"[1][0]"}
lesson: operators
"arithmetic_operators":::"Use the correct operator, so that the variable c is equal to "wooden table".":::"String a="wooden"; String b=" table"; String c = a ___ b;":::{"+"}
"arithmetic_operators":::"Multiply 3 and 4.":::"3___4":::{"*"}
"arithmetic_operators":::"What is the value of this expression?":::"3+4*5":::{"23"}
"operators_prefix":::"Add 1 to a and assign this value to a with one operation. Then print the new value out.":::"System.out.println(___);":::{"++a"}
"operators_postfix":::"Print out 0, but use the ++ operator and the variable a.":::"int a=0; System.out.println(___);":::{"a++"}
"comparison_operators":::"Print out true by comparing 1 and 3":::"System.out.println(1___3);":::{"<"::"!="}
"logic_operators":::"Write a boolean expression that is true.":::"1 < 3 ___ 3 < 1":::{"||"}
"logic_operators":::"":::"true ___ false == false":::{"&&"}
"bitwise_operators":::"Use a bitwise operator.":::"System.out.println(3___4);":::{"|"::"&"::"<<"::">>"::">>>"}
"assignment_operators":::"Assign the value 3 to a by multiplying it with 3.":::"int a=1; a___;":::{"*=3"}
"assignment_operators":::"Assign the value 1 to a.":::"int a=3; a%=___;":::{"2"}
lesson: statements
"expressions":::"Add a literal to make this arithmetic expression valid.":::"(3 + ___ * 2) == 7":::{"2"}
"statements":::"Add a assignment operator to make this statement legal.":::"int f ___ 3.0;":::{"="::"+="::"-="::"*="::"/="::"%="}
"code_blocks":::"Add something to make this code snipped legal.":::"{___}}":::{"{"}
"code_blocks":::"":::"A code block is a sequence of statements wrapped with ___.":::{"{ and }"::"{,}"}
lesson: controll_structures
"boolean_expression":::"Create a boolean expression.":::"0 < 1 ___ 1 < 2":::{"||"::"&&"}
"if":::"Insert an if statement so that the integer x is not negative. ":::"x = x-y; ___{x *= -1;}"}:::{"if(x<0)"::"if(!(x>0||x==0))"}
"if":::Write a nested if statement that is equal to if(p%2==0 && p>0){}":::"if(p>0){___}":::{"if(p%2==0){}"}
"switch":::"Write a valid switch statement.":::"___ a; switch(a){}":::{"byte"::"int"::"short"::"char"}
"while":::"Complete the while statement so that the integer x is greater than 10.":::"___{x=x+1;}":::{"while(x<10)"::"while(!(x==10))"::"while(x!=10)"}
"while":::"Write an infinite loop by adding one literal.":::"while(___);":::{"true"}
"do_while":::"Iterate the variable i from 1 to 10.":::"int i=1;___{++i;}while(i<10);":::{"do"}
"do_while":::"Print out 8.":::"int a=0; ___while(a<8);if(a == 8){System.out.println("Eight");}":::{"do{++a;}"}
"for":::"Iterate the variable i from 0 to 10.":::"for(int i=0;___;i++)":::{"i<=10"::"i<11"::"i!=10"}
"for":::"Write a nested for-loop using the variables b and c to iterate c one hundred times.":::"for(b=0;b<10;b++){for(___);}":::{"c=0;c<10;c++"}
"extended_for":::"Iterate through the array a.":::"String a[] = {"Bob", "Anna", "Tom"}; for(String b ___ a);":::{":"}
"extended_for":::"Print out 1,2 and 3 (in this order).":::"___; for(String b: c){System.out.println(b);}":::{"int c={1,2,3};"::"char c={1,2,3};"::"byte c={1,2,3};"::"short c={1,2,3};"::"long c={1,2,3};"::"double c={1,2,3};"::"float c={1,2,3};"}
"break":::"Print out all number from 1 to 5.":::"for(int i=1; i<10; i++) {if(i>5)___; System.out.println(i);}:::{"break"}
"continue":::"Print out all odd numbers in the range from 1 to 10.":::"for(int i=1; i<=10; i++) {if(i%2==0)___; System.out.println(i);}:::{"continue"}
lesson: methods
"method_definition":::"Define a method with the return type void and access modifier public.":::"___ method{}":::{"public void"}
"method_definition":::"Define the method "add" that takes one parameter (int a) and returns the remainder of the division by 2. The method shall be public and static.":::"___ (int a){return a%2;}":::{"public static int add"}
"method_modifiers":::"Declare a method that can only be accessed though a classname.":::"___ void method() {}":::{"static"}
"method_modifiers":::"Which modifier must be used to access this method everywhere?":::"___ static void m(){}":::{"public"}
"method_access":::"Access the static method random() from the Math class.":::"double a = ___;":::{"Math.random()"}
"method_access":::"Use the method addfive and print to 8. \npublic static int addfive(int a){return a+=5;} \npublic static void print(int a) {System.out.println(a);}":::"___":::{"print(addfive(3));"}
lesson: classes
"class_definition":::"Define the class A.":::"class ___":::{"A{}"::"A {}"::"A{ }"::"A { }"}
"class_definition":::"Define the class B with a constructor that prints out "created!".":::"static class B{___}:::{"public B(){System.out.println("created!");}"}
"inheritance":::"How can B inherit from A?":::"class A ___ B{}":::{"extends"}
"class_modifiers":::"Define a class C that can only serve as a base class":::"___ class C {}":::{"abstract"}
"class_modifiers":::"Define a class G that can not be extended by a subclass.":::"___ class G{}":::{"final"}
"access_modifiers":::"Define a class that can be accessed by every object of any class.":::"___ class C{}":::{"public"}
"access_modifiers":::"Define a class test that can only be used by test1.":::"public class test1{___}":::{"private class test{}"}
"object_declaration":::"What must be added to make this object declaration valid?":::"Word w = new ___();":::{"Word"}
"class_fields":::"Define a class "Number" that has an int variable "value" as member variable (without modifiers).":::"class Number{___}":::{"int value;"::"int value=%INTEGER%;"}
"class_fields":::"Define a class with a member variable "name" of type String (without modifiers).":::"class V{___}":::{"String name;"}
"member_access_variables":::"Reassign the variable width of the object shelf.":::"shelf___ = 0;":::{".width"}
"member_access_methods":::"Access the method get_width() of the object shelf.":::"shelf.___;":::{"get_width()"}