#emotionsreaktion
  dank = "Hey, danke dir!"
  dank = "Ich danke dir."
  dank = "Oh wow, danke dir!"
  dank = "Danke, das bedeutet mir wirklich viel!"
  dank = "Danke, das war sehr freundlich."
  freude = "Ich bin glücklich :)."
  freude = "Das ist wirklich freundlich :)."
  freude = "Hey, ich freue mich :)."
  freude = "Ich bin froh :)."
  ermutigung = "Hey, du kannst das!"
  ermutigung = "Ich bin mir sicher, dass du das kannst."
  ermutigung = "Du. Kannst. Das."
  ermutigung = "Lass uns loslegen."
  ermutigung = "Ich glaube an dich!"
  aufhoeren_beleidigung = "Hey, hör auf!"
  aufhoeren_beleidigung = "Schluss damit! Lass uns weiter lernen!"
  aufhoeren_beleidigung = "Ich habe das verstanden, hör auf damit!"
  aufhoeren_beleidigung = "Hey, lass uns mit den Beleidigungen aufhören!"
  aufhoeren_beleidigung = "Lass uns nicht streiten"

#keine Reaktion
  keine_eingabe_dialog = "Bitte gib deine Antwort in das Textfeld unten ein. Es ist gelb markiert."
  keine_eingabe_dialog = "Du kannst über das Textfeld unten antworten. Es ist gelb markiert."
  keine_eingabe_dialog = "Bitte gib deine Antwort in das Textfeld unten ein. Es ist gelb markiert."
  keine_eingabe_lehre = "Bitte gib deine Antwort in das Textfeld unten ein. Es ist gelb markiert."
  keine_eingabe_lehre = "Bitte gib deine Antwort in das Textfeld unten ein. Es ist gelb markiert."
  keine_eingabe_lehre = "Du kannst über das Textfeld unten antworten. Es ist gelb markiert."

#lehrmanager
  keine_Erklaerungen_WE = "Entschuldigung, ich kenne keinen anderen Weg, um dir das zu erklären. Möchtest du dieses Thema überspringen? Wenn nicht, werde ich dir ein altes Beispiel präsentieren."
  keine_Erklaerungen_OLD = "Entschuldigung, ich kenne keinen anderen Weg, um dir das zu erklären. Möchtest du dieses Thema überspringen? Wenn nicht, werde ich dir eine alte Erklärung zeigen."
  keine_WE = "Entschuldigung, ich kenne keine andere Möglichkeit, dir dies zu erklären. Möchtest du dieses Beispiel überspringen und mit dem Test fortfahren? Andernfalls zeige ich ein altes Beispiel."
  frage_WEverstanden = "Verstehst du dieses Beispiel?"
  frage_WEverstanden = "Verstehst du das?"
  grown_example = "Ich zeige dir ein Beispiel für das Konzept $."
  workers_example = "Schauen Sie sich dieses Beispiel für das Konzept $ an."
  ikonisch = "Schauen Sie sich dieses Bild an. Das Konzept $ ist hervorgehoben."
  ikonisch = "Hier ist ein Bild, um es dir zu erklären."
  ikonisch = "Schauen Sie sich diese Darstellung an, die das Konzept hervorhebt."
  ikonisch = "Hier ist ein Bild, das das Konzept $ hervorhebt."
  ikonisch = "Hier ist eine Beschreibung des Konzepts $."
  nicht_verstanden = "Entschuldigung, das habe ich nicht verstanden. Bitte schreibe in einer einfachen Sprache."
  nicht_verstanden = "Was hast du gesagt?"
  nicht_verstanden = "Hmm ich verstehe nicht ..."
  nicht_verstanden = "Ich verstehe nicht, was Sie sagen."
  nicht_verstanden = "Hmm, was war das?"
  nicht_verstanden = "Das verstehe ich nicht, bitte umformulieren."
  keine_passende_antwort = "Warum solltest du das sagen ... ich verstehe es nicht."
  keine_passende_antwort = "Ich verstehe nicht, was Sie damit meinen."
  keine_passende_antwort = "Ich verstehe nicht, was Sie wollen."
  keine_passende_antwort = "Entschuldigung, ich verstehe nicht, bitte umformulieren."
  keine_passende_antwort = "Ich verstehe diese Antwort nicht."
  
     
  begruessung = "hallo"
  begruessung = "hi"
  begruessung = "hey da"
  begruessung = "Grüße."
  
  frage_Name = "Wie heißt du?"
  frage_Name = "Wie ist Ihr Name?"
  frage_Name = "Wie soll ich dich anrufen?"
  freude_wiedersehen = "Ich freue mich, Sie wiederzusehen, $."
  freude_wiedersehen = "Es ist schön, dich wiederzusehen, $."
  freude_wiedersehen = "Willkommen zurück, $!"
  einleitung = "Ich bin hier, um dir die Syntax von Java beizubringen."
  einleitung = "Mein Ziel ist es, dir Java-Syntax beizubringen."
  einleitung = "Lass mich dir Java-Syntax beibringen"
  
  
  frage_naechsterThemenblock = "Bitte wählen Sie die nächsteLektion aus. Du kannst wählen zwischen:"Programmstruktur", "Grundlagen", "Arrays", "Operatoren", "Anweisungen", "Kontrollstrukturen", "Methoden" und "Klassen"."
  schueler_wissen = "Du kennst schon $"
  lehrinhalt = "Jetzt möchte ich $ erklären."
  lehrinhalt = "Lassen Sie mich das Konzept $ erklären."
  lehrinhalt = "Als nächstes versuche ich dir zu erklären, was $ sind."
  frage_verstanden = "Verstehst du das Konzept $?"
  frage_verstanden = "Verstehst du $?"
  frage_verstanden = "Verstehst du dieses Konzept?"
  wechsel_erklaerung = "Ich kann das Konzept anders ausdrücken."
  wechsel_erklaerung = "Ich versuche es anders zu erklären."
  wechsel_erklaerung = "Ich möchte versuchen, das Konzept anders zu erklären."
  bekannte_themen = "Du weißt schon: $"
  verabschiedung = "bye"
  verabschiedung
  verabschiedung = "tschüss"
  
  joke = "Hier ist ein Witz." F: Was ist der beliebteste Treffpunkt eines Programmierers? \n A: Die Foo Bar. ":)"
  joke = "Lass mich dir einen Witz erzählen." F: Was ist der objektorientierte Weg, um reich zu werden? \n A: Vererbung. ": D"
  joke = "Hier ist ein Witz." F: 0 ist falsch und 1 ist wahr, richtig? \n A: 1. ":)"
  joke = "Lass mich dir einen Witz erzählen:" Ein Optimist sagt: "Das Glas ist halb voll", Ein Pessimist sagt: "Das Glas ist halb leer", Ein Programmierer sagt: "Das Glas ist doppelt so groÃŸ wie nötig . "." :) "
  joke = "Lass mich dir einen Witz erzählen:" F: Warum hat der Programmierer seinen Job gekündigt? \n A: Weil er keine Arrays (eine Erhöhung) bekommen hat. ": D"

#einleitung  
  introduction_syn = "Ich wurde so programmiert, dass ich dir helfen soll die Syntax von Java zu verstehen. Bitte lasse mich dein persönlicher Tutor sein :)."
  why_java2 = "2. Es läuft auf einer Java-Laufzeitumgebung (JRE). Deshalb müssen Sie Java herunterladen. Das bedeutet, dass Sie Ihre Programme auf jedem GerÃ¤t ausführen können, auf dem Java ausgeführt werden kann (Windows, Linux, Android ...). . "
  why_java3 = "3. Es gibt eine Menge mächtiger Bibliotheken (Klassen). Java API sind Bibliotheken, die in der grundlegenden Java-Installation enthalten sind. Mit java.awt erhalten Sie Werkzeuge für grafische BenutzeroberflÃ¤chen. Aber dort sind auch viele externe Bibliotheken von Excel-Lesung bis Kryptographie. "
  why_synja = "Viele Anfänger haben Probleme mit der Syntax einer Sprache und viele Leute beginnen ihre Programmierreise mit dem Erlernen von Java. Mein Entwickler hat möglicherweise ähnliche Erfahrungen gemacht: Sie kompilieren ein Programm (übersetzen es in Befehle, die die CPU ausführen kann ) und der Compiler zeigt Dutzende von Syntaxfehlern an. Sie lösen sie, versuchen es erneut ... und es treten neue Fehler auf. Dies kann vermieden werden, wenn Sie die Syntax von Anfang an verstehen. "
  
  
  teaching = "So möchte ich Sie unterrichten: Der Kurs ist in Lektionen unterteilt, die in kleine Einheiten unterteilt sind. Ich werde eine nach der anderen erklären und Ihr Wissen testen. Wenn Sie meine ErklÃ¤rung nicht verstehen, kann ich mich ausdrücken auf eine andere Art. Am Ende einer Lektion steht ein gröÃŸerer Test (3 Aufgaben). "
  teaching = "So möchte ich dir beibringen: Ich erkläre ein Konzept und teste dann Ihr Wissen. Ich kann jedes Thema auf unterschiedliche Weise erklären. Wenn Sie also eine ErklÃ¤rung nicht verstehen, fragen Sie einfach nach einer anderen ErklÃ¤rung."
  ui = "Die Benutzeroberfläche besteht aus drei Teilen: der pädagogischen Agentenebene, der Eingabeebene und der Lehrebene. Auf der Dialogebene wird unsere Konversation angezeigt. Auf der Eingabeebene können Sie in Bezug auf den Dialog (links) oder in Bezug auf antworten eine Aufgabe (rechts). Auf der Ebene der pÃ¤dagogischen Agenten (rechts) können Sie mich sehen ... "
  ui = "Die Benutzeroberfläche (was auf dem Monitor angezeigt wird) ist in drei Teile unterteilt. Im ersten Teil wird unser Dialog angezeigt (oben links). Darunter können Sie mir eine Nachricht senden, indem Sie sie in das Textfeld und eingeben Drücken Sie den Submit-Button. "
  dialog = "Ich kann einfache Sätze verstehen, die sich auf das Thema beziehen, und einfache Fragen zum Programm beantworten."
  dialog = "Ich kann nur einfache Sätze verstehen."

#intro themenbloecke
  programm_structure = "Die Struktur eines Java-Programms folgt einigen Grundregeln. Sie enthält eine Paketdeklaration, Importe und eine Klasse mit demselben Namen wie die Java-Datei. In der Klasse befindet sich eine Hauptmethode, die den Code enthÃ¤lt, den Sie ausführen möchten."
  basics = "In einer einfachen Ansicht besteht das Java-Programm aus Daten, die in Behältern gespeichert sind, die als Variablen bezeichnet werden (z. B. eine Zeichenfolge zum Speichern eines Namens), und Anweisungen, die bestimmte Aufgaben ausführen (z. B. zwei Zeichenfolgen verbinden) bilden Literale (zB Zahlen oder Strings) Diese Daten können in der Geschichte einer Sendung manipuliert werden, beispielsweise können mit einem Programm die Stationen der Berliner S-Bahn (deren Namen (Strings) und Standort) gespeichert und der kürzeste Weg berechnet werden von A nach B."
  operator = "Ein Operator verbindet einen oder mehrere Operanden eines Typs und ordnet in einer Operation einem Wert Operanden zu. In diesem Kapitel werden dir nachgestellte und vorangestellte Operatoren, logische Operatoren, arithmetische Operatoren, bitweise Operatoren und Zuweisungsoperatoren gezeigt."
  statements = "Operatoren können zum Erstellen von Ausdrücken verwendet werden, die Werte berechnen. Ausdrücke sind die Kernkomponenten von Anweisungen. Anweisungen werden zum Manipulieren von Daten und Steuern des Programmflusses verwendet."
  controll_structures = "Eine Kontrollstruktur entscheidet anhand des Booleschen Wertes, ob und wie oft ein Codeblock ausgeführt wird."
  methods = "Methoden stellen einen Teil eines Programms (einen Anweisungsblock) als Einheit dar und führen ihn beim Aufruf aus."
  arrays = "Arrays sind Felder mit Variablen desselben Typs. Die Länge des Arrays wird bei der Erstellung festgelegt und kann nicht geÃ¤ndert werden."
  classes = "Eine Klasse beschreibt einen neuen Typ mit einem Namen, einem Zustand (Klassenvariablen) und einem Verhalten (Klassenmethoden). Klassen sind Grundlagen einer objektorientierten Sprache wie Java. Sie enthalten Elemente, die Daten speichern und bearbeiten. Klassen sind unterteilt in oberste und verschachtelte Klassen. Beispiel: Klasse a {// oberste Klasse \n Klasse b {// innere Klasse}}. "

#test  
 test = "Jetzt können Sie mir beweisen, dass Sie das Konzept verstanden haben. Bitte lösen Sie den folgenden Test oben."
  freude_antwort = "Großartig, du hast es verstanden."
  freude_antwort = "Cool, du hast es gelöst :)."
  freude_antwort = "Sehr schön, du hast es gelöst :)."
  freude_antwort = "Hey, das ist großartig, du hast es verstanden."
  freude_antwort = "Sehr schön, du hast es geschafft :)."
  entaeuschung_antwort = "Hmmm, das war falsch."
  entaeuschung_antwort = "Ich glaube, es liegt ein Fehler vor."
  entaeuschung_antwort = "Leider muss ich dir sagen, dass dies falsch war."
  entaeuschung_antwort = "Ich denke nicht, dass das richtig war."
  entaeuschung_antwort = "Ich denke das ist falsch."
  testphase_konzept = "Bitte lösen Sie die folgende Aufgabe."
  testphase_konzept = "Bitte lösen Sie die Aufgabe."
  testphase_konzept = "Löse jetzt diese Aufgabe."
  testphase_konzept = "Bitte versuchen Sie diese Aufgabe zu lösen."
  testphase_konzept = "Gut. Versuchen Sie, die Aufgabe zu lösen."
  testphase_themenblock = "Bitte beantworten Sie die folgenden 3 Fragen."
  nextTask = "Hier kommt die nächste Aufgabe."
  nextTask = "Schauen wir uns die nächste Aufgabe an."
  nextTask = "Bitte lösen Sie diese Aufgabe."
  nextTask = "Versuchen Sie, dies zu beantworten."
  nextTask = "Ich denke, Du kannst das beantworten."
  auswertungTest = "Der Test zur Bewertung Ihres Wissens ist jetzt abgeschlossen."
  auswertungTest = "Ok, ich habe die Ergebnisse für den Test."
  auswertungTest = "Schauen wir uns die Ergebnisse für den Test an."
  auswertungTest = "Ich habe den Test ausgewertet."
  Testergebnis_erfolglos = "Schade, dass Sie den Test nicht bestanden haben! Ich bin sicher, dass es dir beim nächsten Mal besser geht."
  Testergebnis_erfolglos = "Wie unglücklich, dass Sie den Test nicht bestanden haben. Ich bin sicher, dass Sie das nächste Mal besser werden."
  Testergebnis_erfolglos = "Hmm ... du hast es nicht geschafft."
  Testergebnis_erfolgreich Glückwunsch, Sie haben den Test bestanden!
  Testergebnis_erfolgreich = "Ja, Sie haben es geschafft. Sie haben den Test bestanden!"
  Testergebnis_erfolgreich = "Gute Arbeit, Sie waren erfolgreich!"
  richtigeAntwort = "Das ist die richtige Antwort. Bestätigen Sie, ob Sie sie gelesen haben."
  richtigeAntwort = "Schauen wir uns die richtige Antwort an. Wenn Sie sie lesen, bestätigen Sie sie bitte."
  richtigeAntwort = "Hier ist die Lösung. Lassen Sie es mich wissen, wenn Sie es lesen."
  richtigeAntwort = "Schauen wir uns die Lösung an. Wenn Sie sie lesen, bestÃ¤tigen Sie sie bitte."
 
  testphase_themenblock_nicht_genug = "Es tut mir leid, aber Sie müssen die Tests für mindestens 50% des Konzepts bestehen, um diesen Test zu versuchen."
  testphase_themenblock_nicht_genug_wdhl = "Möchtest du diesen Block wiederholen oder ein anderes Konzept lernen?"
#enaktiv
  enaktiv_introduction_schritte = "Ok. Versuchen wir das, wir schreiben Stück für Stück ein $."
  enaktiv_introduction_beispiele = "Ok. Schauen wir uns einige Beispiele für $ an."
  enaktiv_anfang = "$"
  enaktiv_schritt = "Bitte geben Sie" $ "ein."
  enaktiv_schritt = "In Teaching Input hinzufügen:" $ "."
  enaktiv_schritt = "Erweitern Sie dies nun in Teaching Input:" $ "."
  enaktiv_beispiel = "Hier ist ein Beispiel. Bitte schreiben Sie es in Teaching Input:" $ "."
  enaktiv_beispiel = "Schauen Sie sich dieses Beispiel an. Schreiben Sie es in Teaching Input:" $ "."
  enaktiv_erweiterung = "Zusammengesetzt sieht es so aus: <b> $ </ b>"
  enaktiv_erweiterung = "So sieht es aus: <b> $ </ b>"
  enaktiv_ende = "Schön, das war's. Du hast ein $ geschrieben."
  enaktiv_ende = "Cool, du hast ein $ geschrieben."

#fehlerklassifizierung
  hinweis = "$"
  berichtigung = "Etwas ist schief gelaufen. $"
  berichtigung = "Ich glaube nicht, dass das richtig war. $"
  berichtigung = "Nicht ganz richtig. $"
  berichtigung = "Ich glaube, das stimmt nicht. $"
  berichtigung = "Hmm, leider muss ich dir sagen, dass du einen Fehler gemacht hast. $"

  freude_verstanden = "Schön, dass Sie das verstanden haben."
  freude_verstanden = "Cool, du hast es verstanden."
  freude_verstanden = "Wow, ich bin froh, dass Sie das Konzept verstanden haben."
  freude_verstanden = "Es ist so schön, dass du es verstanden hast."
  freude_verstanden = "Ich bin froh, dass Sie das Konzept verstanden haben."
  freude_verstanden = "Es ist so schön zu hören, dass du es bekommen hast."

  aufforderung_schreiben_codeschnipsel = "Kannst du ein gültiges $ schreiben?"
  aufforderung_schreiben_codeschnipsel = "Kannst du ein $ schreiben? Wenn ja, bitte."
  aufforderung_schreiben_codeschnipsel = "Kannst du ein Beispiel für $ schreiben?"



  frage_hinweis_verstanden = "Verstehst du das?"
  frage_hinweis_verstanden = "Kannst du dem Tipp folgen?"
  frage_hinweis_verstanden = "Ist der Hinweis verständlich?"
  frage_hinweis_verstanden = "Verstehst du diesen Hinweis?"
  frage_hinweis_verstanden = "Verstehst du diesen Hinweis?"
  frage_berichtigung_verstanden = "Verstehst du das?"
  frage_berichtigung_verstanden = "Hier ist eine Korrektur. Verstehst du das?"
  frage_berichtigung_verstanden = "Verstehst du diese Korrektur?"
  frage_berichtigung_verstanden = "So können Sie Ihren Fehler korrigieren."
  berichtigung_verstanden = "Anscheinend haben Sie die Korrektur verstanden."
  berichtigung_verstanden = "Ich glaube, Sie haben die Korrektur verstanden."
  berichtigung_verstanden = "Schön, dass Sie das Konzept verstanden haben."
  kompetenzfrage = "Kannst du das lösen?"
  kompetenzfrage = "Können Sie diese Aufgabe lösen?"
  kompetenzfrage = "Können Sie eine Lösung für diese Aufgabe finden?"
  kompetenzfrage_mithinweis = "Kannst du das lösen? Sonst kann ich dir einen Tipp geben."
  kompetenzfrage_mithinweis = "Es wäre schön, wenn Sie das lösen könnten. Aber wenn Sie möchten, kann ich dir einen Hinweis geben."
  hinweis_anbieten = "Wenn du es nicht lösen kannst, kann ich dir einen Hinweis geben :)."
  hinweis_anbieten = "Wenn du willst, kann ich dir einen Tipp geben :)."
  hinweis_anbieten = "Benötigen Sie einen Hinweis?"
#reaktion auf unschluessig
  todo_testphasekonzept_loesung = "Versuche, die Aufgabe zu lösen. Antworte, indem du das gelb markierte Textfeld eingibst."
  todo_testphasekonzept_berichtigung = "Versuchen Sie, die Korrektur zu verstehen. Antworten Sie, indem Sie das gelb hervorgehobene Textfeld eingeben."
  todo_fehlerklassifikation_kompetenzfrage = "Du solltest versuchen, die Aufgabe zu lösen. Wenn du es nicht schaffst, kann ich dir einen Hinweis geben. Antworte, indem du das gelb markierte Textfeld eingibst."
#verabschiedung
  verabschiedungs_frage = "Möchtest du das wirklich beenden?"
  verabschiedungs_frage = "Willst du wirklich gehen?"
  verabschiedungs_abbruch = "Das freut mich zu hören. Fahren wir fort!"
  verabschiedungs_abbruch = "Okay, dann lass uns weitermachen!"
#andere
  oop_einleitung = "Bevor ich dir erkläre, was Klassen sind, möchte ich dir erklären, was objektorientierte Programmierung ist. Java ist eine mÃ¤chtige Sprache. Dafür gibt es viele Gründe. Aber eine der wichtigsten, dass es eine objektorientierte Sprache ist. Objekte sind Strukturen in einem Programm, die von realen EntitÃ¤ten oder Ihren Ideen abgeleitet sind. Objekte haben einen Zustand, der durch Daten beschrieben wird, und sie haben ein Verhalten, das durch Methoden beschrieben wird, die ihre Daten ändern. Eine Menge von Objekten wird durch eine Klasse beschrieben. Zum Beispiel dort Dies kann eine Klasse Person sein, die die Daten Vorname, Nachname und Lieblingsfarbe enthÃ¤lt. Sie kann die Methode get_full_name () haben, die den Vornamen, Nachnamen und die Lieblingsfarbe zurückgibt. Ein Objekt kann Tom sein. Tom hat den Vornamen "Tom" und den Nachnamen "Doe" seine Lieblingsfarbe ist blau. Keine Sorge, ich werde dir das alles im Detail erklären. Die WIRKLICHE Kraft der objektorientierten Programmierung (OOP) besteht darin, dass Objekte andere Objekte enthalten können. Ein Onebook könnte für jedes eine Telefonnummer speichern Personenobjekt. "
  bases_einleitung = "Bevor ich die Grundlagen der Java-Syntax erkläre, möchte ich erklären, was Basen sind. Ganzzahlen, die ganze Zahlen sind, können auf verschiedene Arten dargestellt werden. Im tÃ¤glichen Leben verwenden wir Dezimalzahlen (12,89,2 .. Sie sind wie folgt aufgebaut: 100 * 1 + 10 * 2 + 1 * 3 = 123 = 10 ^ 2 * 1 + 10 ^ 1 * 2 + 10 ^ 0 * 3 ^ ist der Potenzoperator 56: 10 ^ 1 * 5 + 10 ^ 0 * 6 = 56. 10 ist die Basis des Dezimalsystems, daher können Sie die Ziffern 0-9 verwenden. Zahlen können jedoch auch in anderen Basen angezeigt werden. 2 (binÃ¤r), 8 (oktal), 16 (hexadezimal) werden von Java verwendet. Eine BinÃ¤rzahl kann folgendermaÃŸen aussehen: 10: 2 ^ 1 * 1 + 2 ^ 0 * 0 = 2 + 0 = 2 in Dezimalzahl oder 111: 2 ^ 2 * 1 + 2 ^ 1 * 1 + 2 ^ 1 * 1 = 4 + 2 + 1 = 7. BinÃ¤rzahlen können nur die Ziffern 0 und 1 enthalten, da sie die Basis 2 haben. Die Oktalzahl kann die Ziffern von 0-7 enthalten (z. B. 11: 8 * 1 + 1 * 1 = 9 dezimal) ). Hexadezimalzahlen haben 16 verschiedene Ziffern: 0,1,2,3,4,5,6,7,8,9, A, B, C, D, E, F. A-F sind gleich 10-15. Also AA: 16 * 15 + 1 * 15 = 256 in Dezimalzahl. "

