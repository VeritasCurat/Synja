#emotionsreaktion
  dank = "Oh thank you!"
  dank = "Thank you so much!"
  dank = "Oh wow, thank you!"
  dank = "Thank you, that means a lot to me!"
  dank = "Thank you, you are nice."
  freude = "I'm really happy :)."
  freude = "This is really nice :)."
  freude = "Yeah, I like this :)."
  freude = "I'm happy :)."
  ermutigung = "Hey, you can do this!"
  ermutigung = “I’m sure you can do this."
  ermutigung = "You. Can. Do. This!" 
  ermutigung = "Let's do it!" 
  ermutigung = "I believe in you!" 
  aufhoeren_beleidigung = "Hey, stop that!”
  aufhoeren_beleidigung = "Enough with this, let's continue learning!"
  aufhoeren_beleidigung = "I understood that, stop that!”
  aufhoeren_beleidigung = "Hey, let's stop with the insults!"
  aufhoeren_beleidigung = "Let's not argue.”

#noreaction
  keine_eingabe_dialog = "Please answer by typing into the text box below. It is marked yellow."
  keine_eingabe_dialog = "You can answer using the text box below. It is marked yellow."
  keine_eingabe_dialog = "Please type your answer into the text box below. It is marked yellow."
  keine_eingabe_dialog = "Check the yellow box below. Here you can answer."
  keine_eingabe_lehre = "Please answer by typing into the text box below. It is marked yellow."
  keine_eingabe_lehre = "Please type your answer into the text box below. It is marked yellow."
  keine_eingabe_lehre = "You can answer using the text box below. It is marked yellow."
  keine_eingabe_lehre = "Check the yellow box below. Here you can answer."

#lehrmanager
  keine_Erklaerungen_WE = "Sorry, I don’t know any other way to explain this to you. Do you want to skip this topic? If not, I will present an example to you."
  keine_Erklaerungen_OLD = "Sorry, I don’t know any other way to explain this to you. Do you want to skip this topic? If not, I will present an old explanation to you."
  keine_WE = "Sorry, I don’t know any other way to explain this to you. Do you want to skip this example and continue with the test? If not, I will show you an old example."
  frage_WEverstanden = "Do you understand this example?"
  frage_WEverstanden = "Do you understand this?"
  worked_example = "I will show you an example for the concept $."
  worked_example = "Take a look at this example for the concept $."
  ikonisch = "Take a look at this picture. The concept $ is highlighted."
  ikonisch = "Here is a picture to explain it to you."
  ikonisch = "Look at this depiction that highlights the concept."
  ikonisch = "Here is a picture that highlights the concept $."
  ikonisch = "Here is a depiction of the concept $."
  nicht_verstanden = "Sorry, I didn’t get that. Please write it in simple language."
  nicht_verstanden = "What did you say?"
  nicht_verstanden = "Hmm, I don’t understand..."
  nicht_verstanden = "I don’t get what you are saying."   
  nicht_verstanden = "Hmm, what was that?"
  nicht_verstanden = "I didn’t get that. Please rephrase."
  keine_passende_antwort = "Why should you say that ... I don't get it."
  keine_passende_antwort = "I don’t get what you mean by that."
  keine_passende_antwort = "I don’t understand what you want."
  keine_passende_antwort = "Sorry, I don’t understand. Please rephrase."
  keine_passende_antwort = "I dont understand this answer."
  
     
  begruessung = "hello"
  begruessung = "hi"
  begruessung = "hey there"
  begruessung = "Greetings."
  
  frage_Name = "Whats your name?"
  frage_Name = "What is your name?"
  frage_Name = “What should I call you?"
  freude_wiedersehen = "I'm glad to see you again, $."
  freude_wiedersehen = "It's nice to see you again, $."
  freude_wiedersehen = "Welcome back, $!"
  einleitung = “I’m here to teach you the syntax of Java."
  einleitung = "My goal is to teach you Java syntax."
  einleitung = "Let me teach you Java Syntax"
  
  
  frage_naechsterThemenblock = "Please choose the next lesson. You can choose between: "programm structure", "basics", "arrays", "operators", "statements", "controll structures", "methods" and "classes""."
  schueler_wissen = "You already know $"
  lehrinhalt = "Now I would like to explain $."
  lehrinhalt = "Let me explain the concept $."
  lehrinhalt = "Next I will try to explain to you what $ are."
  frage_verstanden = "Do you understand the concept $?"
  frage_verstanden = "Do you understand $?"
  frage_verstanden = "Do you understand this concept?"
  wechsel_erklaerung = "I can express the concept in another way."
  wechsel_erklaerung = "I will try to explain it in another way."
  wechsel_erklaerung = "I would like to try to explain the concept differently."
  bekannte_themen = "You already know: $"
  verabschiedung = "bye"
  verabschiedung = "good bye"
  verabschiedung = "bye-bye"
  
  joke = "Here is a joke. "Q: Why do Java programmers wear glasses? \n A: They can't C#." :D"
  joke = "Here is a joke. "Q: What is a programmer's favourite hangout place? \n A: Foo Bar." :)"
  joke = "Let me tell you a joke. "Q: What's the object-oriented way to become wealthy? \n A: Inheritance." :D"
  joke = "Here is a joke. "Q: 0 is false and 1 is true, right? \n A: 1." :)"
  joke = "Let me tell you a joke: "An optimist says: "the glass is half-full", A pessimist says: "the glass is half-empty", A programmer says: "the glass is twice as large as necessary."." :)"
  joke = "Let me tell you a joke: "Q: Why did the programmer quit his job? \n A: Because he didn't get arrays (a raise)." :D"
  
#einleitung  
  introduction_syn = "I was programmed to help you understand the syntax of Java. Please let me be your personal tutor :)."
  why_java2 = "2. It runs on a java runtime environment (JRE); that's why you have to "download java". That means you can run your programs on every device that can run java (windows, linux, android ...)."
  why_java3 = "3. There are a lot of libraries (set of classes) out there that are really powerful. Java API are libraries that are included in the basic java installation. java.awt will give you tools for Graphical User Interfaces, but there are also a lot of external libraries from excel reading to cryptography."
  why_synja = "A lot of beginners have problems with the syntax of a language and a lot of people begin their programming journey by learning Java. My Developer may have had similar experiences: you compile a program (translate it into commands that the CPU can execute) and the compiler shows dozens of syntax errors. You solve them, try again ... and new mistakes emerge. This can be avoided if you understand the syntax from the very beginning."
  
  
  teaching = "This is how I would like to teach you: the course is divided into lessons which are divived into small units. I will explain one after another and test your knowledge. If you don't understand my explanation, I can express myself in a different way. At the end of a lesson is a bigger test (3 tasks)."
  teaching = "This is how i want to teach you: i explain a concept and then i test your knowledge. I can explain every subject in different ways, so if you don't understand an explanation just ask for another explanation."
  ui = "The UI consists of three parts: the pedagogical agent layer, the input layer, and the teaching layer. At the dialogue level our conversation is displayed. At the input layer, you can answer related to the dialogue (left) or related to a task (right). At the pedagogical agent level, (on the right) you can see me ... "
  ui = "The GUI (what is displayed on the monitor) is divided into three parts. The first part is where our dialogue is displayed (top-left). Under that you can send me a message by typing it in in the textbox and hitting the Submit button."
  dialog = "I can understand simple sentences which relate to the subject and I can answer simple questions about the program. "
  dialog = "I can only understand simple sentences."

#intro themenbloecke
  programm_structure = "The structure of a Java program follows some basic rules. It contains a package declaration, imports and a class with the same name as the java file. In this class is a main method that contains the code you want to run."
  basics = "In a simple view, the Java program consists of data stored in the variables (for example, a string to save a name) and statements that perform certain tasks (for example, connect two strings)."
  operators = "An operator connects one or more operands of a type and, in an operation, maps operands to a value. In this chapter I will show you post and prefix operators, logical operators, arithmetic operators, bitwise operators and assignment operators."
  statements = "Operators may be used in building expressions which compute values. Expressions are the core components of statements. Statements are used to manipulate data and control the program flow."
  controll_structures = "A control structure decides, based on boolean value, if and how often a block of code is executed."
  methods = "Methods represent a part of a program (a block of statements) as a unit and execute it when called. "
  arrays = "Arrays are fields of variables of the same type. Array length is defined at creation and cannot be changed."
  classes = "A class describes a new type with a name, a state (class variables) and behaviour (class methods). Classes are fundamentals of an object-oriented language such as Java. They contain members that store and manipulate data. Classes are divided into top-level and nested. For example: class a {//top-level class \n class b{ //inner class}}."
#test  
  test = "Now you can prove to me that you understood the concept. Please solve the following test above."
  freude_antwort = "Great, you got it."
  freude_antwort = "Cool, you solved it :)."
  freude_antwort = "Very nice, you solved it :)."
  freude_antwort = "Hey, that's great, you got it."
  freude_antwort = "Very nice, you did it :)."
  entaeuschung_antwort = "Hmmm, that was wrong."
  entaeuschung_antwort = "I think there is a mistake."
  entaeuschung_antwort = "Unfortunately, I have to tell you that this was wrong."
  entaeuschung_antwort = "I don't think that was right."
  entaeuschung_antwort = "I think that is wrong."
  testphase_konzept = "Please solve the following task."
  testphase_konzept = "Please solve the task."
  testphase_konzept = "Now solve this task."
  testphase_konzept = "Please try to solve this task."
  testphase_konzept = "Good. Try to solve the task."
  testphase_themenblock = "Please answer the following 3 questions."
  nextTask = "Here comes the next task."
  nextTask = "Let's take a look at the next task."
  nextTask = "Please solve this task."
  nextTask = "Try to answer this."
  nextTask = "I think you can answer this."
  auswertungTest = "The test for evaluating your knowledge is now complete."
  auswertungTest = "Ok, I have the results for the test."
  auswertungTest = "Let's take a look at the results for the test."
  auswertungTest = "I have evaluated the test."
  Testergebnis_erfolglos = "Too bad, you didn't pass the test! I'm sure next time you'll get better."
  Testergebnis_erfolglos = "How unfortunate you did not pass the test. I'm sure next time you'll do better."
  Testergebnis_erfolglos = "Hmm … you did not succeed unfortunately.”
  Testergebnis_erfolgreich = "Congratulations, you passed the test!"
  Testergebnis_erfolgreich = "Yay you did it. You passed the test!"
  Testergebnis_erfolgreich = "Good work, you were successful!"
  richtigeAntwort = "That is the correct answer. Confirm if you read it."  
  richtigeAntwort = "Let's take a look at the correct answer. If you read it, please affirm."  
  richtigeAntwort = "Here is the solution. Let me know if you read it."  
  richtigeAntwort = "Let's look at the solution. If you read it, please affirm."  
 
  testphase_themenblock_nicht_genug = "I'm sorry, but you need to pass the tests with at least 50% to try this test."
  testphase_themenblock_nicht_genug_wdhl = "Do you want repeat this block or learn another concept?"
#enaktiv
  enaktiv_introduction_schritte = "Ok. Let's try this. We will write a $ piece for piece."
  enaktiv_introduction_beispiele = "Ok. Let's look at some examples for $."
  enaktiv_anfang = "$"
  enaktiv_schritt = "Please add in Teaching Input: "$"."
  enaktiv_schritt = "Add this in Teaching Input: "$"."
  enaktiv_schritt = "Now expand on this in Teaching Input: "$"."
  enaktiv_beispiel = "Here is an example. Please write it in Teaching Input: "$"."
  enaktiv_beispiel = "Take a look at this example. Write it in Teaching Input: "$"."
  enaktiv_erweiterung = "Composed, it looks like this: <b>$</b>"
  enaktiv_erweiterung = "As one, it looks like this: <b>$</b>"
  enaktiv_ende = "Nice, that's it. You wrote a $."
  enaktiv_ende = "Cool, you wrote a $."

#fehlerklassifizierung
  hinweis = "$"
  berichtigung = "Something went wrong. $"
  berichtigung = "I don't think this was right. $"
  berichtigung = "Not quite right. $"
  berichtigung = "I think there's something wrong with that. $"
  berichtigung = "Hmm unfortunately, I have to tell you you made a mistake. $"

  freude_verstanden = "Nice, I am glad that you understood that."
  freude_verstanden = "Cool, you got it."
  freude_verstanden = "Wow, I’m happy that you understood the concept."
  freude_verstanden = "It's so nice that you understood it."
  freude_verstanden = "I'm happy that you understood the concept."
  freude_verstanden = "It's so nice to hear that you got it."

  aufforderung_schreiben_codeschnipsel = "Please write a valid $."
  aufforderung_schreiben_codeschnipsel = "Now please write a $."
  aufforderung_schreiben_codeschnipsel = "OK, now please write a valid $."
  aufforderung_schreiben_codeschnipsel = "Can you write a $? If so please do."
  aufforderung_schreiben_codeschnipsel = "Please try to write a valid $."

  frage_hinweis_verstanden = "Do you understand this?"
  frage_hinweis_verstanden = "Can you follow the tip?"
  frage_hinweis_verstanden = "Is the hint understandable?"
  frage_hinweis_verstanden = "Do you understand this clue?"
  frage_hinweis_verstanden = "Do you understand this hint?"
  frage_berichtigung_verstanden = "Do you understand this?"
  frage_berichtigung_verstanden = "Here is a correction. Do you understand this?"
  frage_berichtigung_verstanden = "Do you understand this correction?"
  frage_berichtigung_verstanden = "This is how you can correct your mistake."
  berichtigung_verstanden = "It seems like you understood the correction."
  berichtigung_verstanden = "I think you understood the correction."
  berichtigung_verstanden = "Nice, it seems like you understood the concept."
  kompetenzfrage = "Can you solve this?"
  kompetenzfrage = "Are you able to solve this task?"
  kompetenzfrage = "Can you work out a solution for this task?"
  kompetenzfrage = "It would be nice if you could solve this."
  kompetenzfrage_mithinweis = "Can you solve this? Otherwise, I can give you a hint."
  kompetenzfrage_mithinweis = "It would be nice if you could solve this. But if you want, I can give you a hint."
  hinweis_anbieten = "If you can't solve it, I can give you a hint :)."
  hinweis_anbieten = "If you would like, I can give you a hint :)." 
  hinweis_anbieten = "Do you need a hint?" 
#reaktion auf unschluessig
  todo_testphasekonzept_loesung = "Try to solve the task. Answer by typing in the textbox that is highlighted in yellow."  
  todo_testphasekonzept_berichtigung = "Try to understand the correction.  Answer by typing in the textbox that is highlighted in yellow."  
  todo_fehlerklassifikation_kompetenzfrage = "You should try to solve the task. If you can't do it, I can give you a hint. Answer by typing in the textbox that is highlighted in yellow."
#verabschiedung
  verabschiedungs_frage = "Are you sure you want to quit this?"
  verabschiedungs_frage = "Do you really want to go?"
  verabschiedungs_abbruch = "That's nice to hear. Let's continue!"
  verabschiedungs_abbruch = "Ok, then let us continue!"
#andere
  oop_einleitung = "Before I explain what classes are, I would like to explain what object-oriented programming is. Java is a powerful language. There many reasons for that, but one of the most important is that it is an object-oriented language. Objects are structures in a program that are derived from real world entities or your ideas. Objects have a state, described by data, and they have a behaviour described by methods that change their data. A set of objects is described by a class. For example, there could be a class Person which has the data firstname, lastname and favorite_color. It may have the method get_full_name() which returns the first name, last name and favorite color. An object could be Tom. Tom has the first name "Tom" and the last name "Doe" his favorite color is blue. Don't worry, I will explain this all in detail to you. The REAL power of object oriented programming (OOP) is that objects can contain other objects. A phonebook could save a phone number for every Person object."
  bases_einleitung = "Before I explain the basics of Java syntax, I would like to explain what bases are. Integers, i.e. whole numbers, can be represented in different ways. In day to day life we use decimal numbers (12,89,2 ...). They are constructed like this: 100 * 1 + 10 * 2 + 1 * 3 = 123 = 10^2 * 1 + 10^1 * 2 + 10^0 * 3. ^ is the exponent operator. Another example is 56: 10^1 * 5 + 10^0 * 6 = 56. 10 is the base of the decimal system, thus you can use the digits 0-9. \nHowever, numbers can be displayed in other bases as well; 2 (binary), 8 (octal), 16 (hexadecimal) are used by Java. A binary number can look like this: 10: 2^1 * 1 + 2^0 * 0 = 2+0 = 2 in decimal or 111: 2^2 * 1 + 2^1 * 1 + 2^1 * 1 = 4+2+1 = 7. Binary numbers can only contain the digits 0 and 1 because they have the base 2. Octal number can contain the digits from 0-7 (e.g. 11: 8*1 + 1*1 = 9 in decimal). Hexadecimal numbers have 16 different digits: 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F. A-F are equal to 10-15. Thus AA: 16*15 + 1*15 = 256 in decimal."