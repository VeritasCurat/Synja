lesson: programm_structure
"programm_structure_main":::"Let's write a valid main method.":::"static void main(String a[]){}":::{"public"::" static"::" void"::" main"::"("::"String[]"::"a"::")"::"{}"}
"programm_structure_import":::"Let's write a valid import declaration.":::"import java.*;":::{import"::" java"::"."::"*"::";"}
"programm_structure_packages":::"Let's write a valid package declaration.":::"package src;":::{"package"::" src"::";"}
lesson: basics
"comments":::"Let's write a single line comment.":::"//COMMENTS":::{"//"::"COMMENTS"}
"literals":::"Let's write some valid literals.":::{""test""::""name""::""var""}
"integer_literals":::"Let's write some valid integer literals.":::{"0b0101"::"12"::"032532"::"0xAA"}
"floating-point_literals":::"Let's write some valid floating-point literals.":::{"1.0F"::"1.0D"::".1"}
"character_literals":::"Let's write some valid character literal.":::{"'c'"::"'1'"::"'\n'"}
"string_literals":::"Let's write some valid String literals.":::{""String""::"12A"::"happy"}
"boolean_literals":::"Let's write some valid boolean literals.":::{"true"::"false"}
"null_literal":::"Let's write a valid empty value.":::{"null"}
"keywords":::"Let's write a valid keywords.":::{"char"::"for"::"abstract"::"static"::"return"}
"identifiers":::"Let's write a some valid identifiers.":::{""id""::"_var"::"id1"}
"types":::"Let's write a some valid identifiers.":::{"float"::"int"::"String"::"boolean"}
"variable_definition":::"Let's create an String variable with the name y by adding the keyword String.":::"String y;":::{"String"::"y"::";"}
"variable_definition_initialization":::"Let's create an int variable with the name y and assign the value 3 to it.":::"int y = 3;":::{"int"::" y"::"="::"3"::";"}
"variable_access":::"Let's access the variable s by adding its name.":::"System.out.println(s);":::{"s"}
"variable_reassignment":::"Let's redefine the float variable f to 3.14.":::"f = 3.14;":::{"f"::"="::"3.14"::";"}
lesson: arrays
"array_definition":::Let's define a String array.":::"String a[];":::{"String"::" a"::"[]"::";"}
"array_declaration":::"Let's declare a char array with 3 elements.":::"char[] a = new char[3];":::{"char"::"[]"::" a"::"="::"new"::" char"::"[3]"::";"}
"array_definition_initialization":::Let's define an int array with the values 1 and 2.":::"int a[] = {1,2};":::{"int"::" a"::"[]"::"="::"{"::"1"::","::"2"::"}"::";"}
"array_access":::"Let's access the array a on position 0.":::"System.out.println(a[0]);":::{"a"::"["::"0"::"]"}
"array_reassignment":::"Let's reassign the first element of the array test with a 3.":::"array[0] = 3;":::{"array"::"[0]"::"="::"3"::";"}
"multidim_array_definition":::"Let's define a two-dimensional String array.":::"String a[][];":::{"String"::" a"::"[]"::"[]"::";"}
"multidim_array_declaration":::"Let's define and declare a twodimensional array. The first dimension should have 5 elements, the second 10.":::"int a[][] = new int[5][10];":::{"int"::" a"::"[]"::"[]"::"="::"new"::" int"::"[5]"::"[10]"}
"multidim_array_access":::"Let's access the first element of a twodimensional array.":::"System.out.println(a[0][0]);":::{"a"::"[0]"::"[0]"}
"multidim_array_reassignment":::"Let's reassign the third element of a two-dimensional array.":::"a[1][0] = 3;":::{"a"::"[1]"::"[0]"::"="::"3"::";"}
lesson: operators
"arithmetic_operators":::"Let's sum 3 and 5 by using the + operator.":::"3 + 5":::{"3"::"+"::"5"}
"operators_prefix":::"Let's add increment the int variable b by using a prefix operator.":::"++b;":::{"++"::"b"::";"}
"operators_postfix":::"Let's decrement the int variable q by using a postfix operator.":::"q--;":::{"q"::"--"::";"}
"comparison_operators":::"Let's compare 6 and 9 by using the < operator.":::"6 < 9":::{"6"::"<"::"9"}
"logic_operators":::"Let's write us use the || operator.":::"true || false":::{"true"::" || "::"false"}
"bitwise_operators":::"Let's use the bitshift operator << to left shift the variable var.":::"var=var<<1;":::{"var"::"="::"var"::"<<"::"1"::";"}
"assignment_operators":::"Let's concatenate ", World!" to a= "Hello" by using the += operator.":::"a+=", World!";":::{"a"::"+="::"", World!""::";"}
lesson: statements
"expressions":::"Let's develope an expression that multiplies the variable var by 2 by bitshifting it one position to the left (<<1). Then add 3.":::"(var<<1) + 3":::{"("::"var"::"<<"::"1"::")"::"+"::"3"}
"statements":::"Let's write a variable declaration.":::"int a = ++b;":::{"int"::" a"::"="++"::"b"::";"}
"code_blocks":::"Let's write an empty codeblock.":::"{}":::{"{"::"}"}
lesson: controll_structures
"boolean_expression":::"Let's write a boolean expression that is true.":::"1 < 3":::{"1"::"<"::"3"}
"if":::"Let's write an if-statement.":::"if(true);"}:::{"if"::"("::"true"::")"::";"}
"switch":::"Let's write a switch statement.":::"switch(var){}"}:::{"switch"::"("::"var"::")"::"{}"}
"while":::"Let's write a while loop.":::"while(false);"}:::{"while"::"("::"false"::")"::";"}
"do_while":::"Let's write a do-while loop.":::"do{}while(true);"}:::{"do"::"{"::"}"::"while"::"("::"true"::")"::";"}
"for":::"Let's write a for loop.":::"for(int a=0;a<10;a++){System.out.println(a);}"}:::{"for"::"("::"int a=0;"::"a<10;"::"a++"::")"::"{"::"Systen.out.println(a);"::"}"}
"extended_for":::"Let's write an extended for loop for the array A.":::"for(int a:A){}":::{"for"::"("::"int"::" a"::":"::"A"::")"::"{"::"}"}
"break":::"Let's write a break statement.":::"for(;;){break;}":::{"break"::";"}
"continue":::"Let's write a continue statement.":::"for(;;) {continue;}":::{"continue"::";"}
lesson: methods
"method_definition":::"Let's define a method.":::"void cube(int a){return a*a*a;}":::{"void"::"cube"::"("::"int a":")"::"{"::"return"::"a*a*a"::";"::"}"}
"method_modifiers":::"Let's define a static method that generates an abbreviation.":::"public static String abbreviation(String[] words){String abr = ""; for(String w: words){abr+=w.toCharArray()[0]+".";} return abr;}":::{"public"::"static"::"String"::"abbreviation"::"("::"String[] words"::")"::"{"::"String abr="";"::"for(String w: words){abr+=w.toCharArray()[0]+".";}::"return abr;"+"}"}
"method_access":::"Let's define a public static method that turns a word.":::"public static String turn(String word) {String ret = ""; for(char w: word.toCharArray()){ret=w+ret;} return ret;}":::{"public"::"static"::"String"::"turn"::"("::"String word"::")"::{"::"String ret = "";"::"for(char w: word.toCharArray()){ret=w+ret;}"::"return ret;"::"}"}
lesson: classes
"class_definition":::"Let's define a class.":::"class B{}:::{"class"::"B"::"{"::"}"}
"inheritance":::"Let's define the class B as the child of A.":::"class B extends A{}":::{"class"::" B "::"extends"::" A "::"{"::"}"}
"class_modifiers":::"Let's define the abstract class G.":::"abstract class G{}":::{"abstract"::"class"::"G"::"{"::"}"}
"access_modifiers":::"Let's define a public class F.":::"public class F{}":::{"public"::" class"::" F"::"{"::"}"}
"class_fields":::"Let's define a class with a String variable name.":::"class C{String name;}":::{"class"::"B::"{"::"String name;"::"}"}
"object_declaration":::"Let's declare the object v of the Vector class (class Vector{int a[] = new int[2];}).":::"Vector v = new Vector();":::{"Vector"::" v"::"="::"new"::" Vector"::"()"::";"}
"member_access_variables":::"The class Person has the variable name. The object Tom was created. Let's redefine it's variable name.":::"class Person{public String name;}\npublic class Test{\n	public static void main(String[] a){\n		Person Tom = new Person();\n		Tom.name = "Tom";\n	}}":::{"Tom"::"."::"name"::=""Tom""::";"}
"member_access_methods":::"The class Person has the method get_name. Let's access it.":::"class Person{public String name; public String get_name(){return this.name;}}\npublic class Test{\n	public static void main(String[] a){\n		Person Tom = new Person();\n		Tom.name = "Tom";\n		Tom.get_name();\n	}}":::{"Tom"::"."::"get_name()"::";"}