lesson: programm_structure
"programm_structure_main":::"Erstellen Sie eine Hauptmethode mit den richtigen Modifikatoren und Parametern.":::"1. Fügen Sie den Sichtbarkeitsmodifikator hinzu: public \ n2. Fügen Sie den statischen Modifikator hinzu: public static \ n 3. Fügen Sie den Rückgabetyp hinzu: public static void \ n 4. Fügen Sie den Namen hinzu: public static void main \ n 5. Fügen Sie die Parameter hinzu: public static void main (Zeichenfolge a []) {} \ n 6. Fügen Sie Code hinzu, der in der main-Methode ausgeführt werden soll ( Die vorherigen Schritte müssen folgendermaßen ausgeführt werden: public static void main (String a []) {/ * Code * /} "
"programm_structure_import":::"Erstellen Sie eine Importdeklaration, um alles innerhalb des Pakets Java zu importieren.":::"1. Wählen Sie den richtigen Speicherort (nach der Paketdeklaration). \ n2. Fügen Sie das Schlüsselwort hinzu: import \ n3 Paket: Java importieren \ n4. Fügen Sie einen Punkt hinzu: Java importieren. \ n5. Fügen Sie einen Stern hinzu, um alles in das Paket Java zu importieren: Java importieren. * \ n6. Fügen Sie ein Semikolon hinzu: Java importieren. *; "
"programm_structure_packages":::"Erstellen Sie eine Paketdeklaration für die Datei project.src.folder1.test.java":::"1. Wählen Sie den richtigen Speicherort (ganz am Anfang). \ n2. Geben Sie das Schlüsselwort ein: package \ n 3. Schreiben Sie den Ordnernamen ordner1: paket ordner1; \ n 4. Fügen Sie einen Punkt hinzu: paket ordner1. \ n5. Vervollständigen Sie die Paketdeklaration durch Hinzufügen des Dateinamens test: paket ordner1.test; "
lesson: basics
"comments":::"Kommentar hinzufügen":::"1. Wählen Sie den richtigen Typ (// für einen Einzeiler, / ** / für mehrere Zeilen) \ n 2. Schreiben Sie den Kommentar: int a = 8 ; // redundanter Kommentar "
"literals":::"Weisen Sie eine Variable mit einem Literal zu.":::"1. Wählen Sie die richtige Position (bei der Zuweisung oder Neuzuweisung): int a = HERE; \ n 2. Verwenden Sie das richtige Literal für den passenden Typ: int a = 8;
"integer_literals":::"":::"3"
"floating-point_literals":::"":::"1.0"
"character_literals":::"Schreiben Sie ein 'r' als Zeichenliteral":::"1. Schreiben Sie ein ':' \ n2. Schreiben Sie das Zeichen: 'r \ n3. Schreiben Sie erneut ein': 'r'"
"string_literals":::"Schreiben Sie ein" Hallo "als String-Literal.":::"1. Schreiben Sie ein": "\ n2. Schreiben Sie einen String:" Hallo \ n3. Schreiben Sie noch einmal "Hallo"
"boolean_literals":::"":::"true"
"null_literal":::"":::"null"
"keywords":::"Fügen Sie das Schlüsselwort" package "hinzu, um dem Code mehr Bedeutung zu verleihen.":::"package java.Math. *;"
"identifiers":::"Deklarieren Sie einen Bezeichner für eine Variable.":::"1. Wählen Sie die richtige Position nach dem Typ: int ___; \ n 2. Verwenden Sie die richtige Syntax (Bezeichner beginnen mit einem _ oder einem Buchstaben) : int test; "
"types":::"Es ist wichtig, den richtigen Typ für ein Literal zuzuweisen.":::"Ganzzahlige Literale sind Ganzzahltypen zugeordnet (int, short, long, char, byte). Float-Literale sind Float-Typen zugeordnet (float, double) und String, char und boolean Literale sind jeweils dem gleichnamigen Typ zugeordnet. Das Null-Literal ist etwas Besonderes: Es ist keinem Typ zugeordnet. "
"variable_definition":::"Erstellt eine int-Variable.":::"1. Schreiben Sie den Typ: int \ n2. Schreiben Sie einen Bezeichner: int var \ n3. Schreiben Sie ein Semikolon: int var;"
"variable_definition_initialization":::"Erstellen Sie eine doppelte Variable und initialisieren Sie sie.":::"1. Schreiben Sie das Schlüsselwort: double \ n2. Schreiben Sie einen Bezeichner: int d \ n3. Schreiben Sie ein" = ": int d = \ n3 Schreiben Sie ein Doppel-Literal: double d = 1.0D \ n4. Schreiben Sie ein Semikolon: double d = 1.0D; "
"variable_access":::"Greifen Sie auf die zuvor definierte int-Variable a zu, indem Sie sie ausdrucken.":::"1. Schreiben Sie den Kontext des Zugriffs: System.out.println (); \ n2. Fügen Sie die Variable ein: System.out.println (a); "
"variable_reassignment":::"Definiere die Variable a neu.":::"1. Schreibe den Namen der Variablen: a \ n2. Schreibe ein" = ": a = \ n3. Schreibe einen passenden Wert: a = 9 \ n 4. Schreiben Sie ein Semikolon: a = 9; "
lesson: arrays
"array_definition":::"Definieren Sie ein int-Array.":::"1. Fügen Sie das Schlüsselwort int hinzu: int \ n2. Fügen Sie den Namen des Arrays hinzu: int a \ n3. Fügen Sie ein []: int a [] \ n4. Fügen Sie ein Semikolon hinzu: int a []; "
"array_declaration":::"Definieren Sie ein String-Array mit 5 Elementen.":::"1. Fügen Sie den Typ hinzu: String \ n2. Fügen Sie den Namen hinzu: String-Array \ n3. Fügen Sie ein []: String-Array [] \ n hinzu 4. Fügen Sie ein =: String-Array [] = \ n5 hinzu. Verwenden Sie den Operator new: String-Array [] = new \ n6. Schreiben Sie den Typ und die Anzahl der Elemente in eckige Klammern: String-Array [] = new String [5] ; "
"array_definition_initialization":::"Definieren und initialisieren Sie ein int-Array mit 5 Elementen und initialisieren Sie diese mit den Zahlen 1 bis 5.":::"1. Fügen Sie den Typ hinzu: int \ n2. Fügen Sie den Namen hinzu: int array \ n3. Add a []: int array [] \ n 4. Verwenden Sie den Operator =: int array [] = \ n5. Schreiben Sie die Werte in geschweifte Klammern, die durch Kommas getrennt sind: int array [] = {1,2,3,4, 5} \ n6. Fügen Sie ein Semikolon hinzu: int array [] = {1,2,3,4,5}; "
"array_access":::"Greifen Sie auf das erste Element des definierten und initialisierten Arrays staff zu: String staff = {" Meier "," Mueller "};":::"1. Notieren Sie den Namen des Arrays: staff \ n 2. Greifen Sie auf das erste Element (Index: 0) zu: staff [0]; "
"array_reassignment":::"Ordnen Sie das zweite Element des Array-Notensystems mit dem Namen" Miller "neu zu: String staff = {" Meier "," Mueller "};":::"1. Schreiben Sie den Namen des Arrays: staff \ n 2. Greifen Sie mit eckigen Klammern auf das zweite Element zu (Array-Elemente beginnen mit 0): staff [1] \ n 3. Weisen Sie dies wie eine String-Variable zu (Haupttyp des Arrays): staff [1] = "Miller"; "
"multidim_array_definition":::"Definiere ein zweidimensionales int-Array mit dem Namen array.":::"1. Schreibe int: int \ n 2. Schreibe den Namen: int array \ n3. Schreibe [] [] (für 2 dimensional): int name [] [] \ n4. Schreiben Sie ein Semikolon: int name [] []; "
"multidim_array_declaration":::"Deklarieren Sie ein zweidimensionales int-Array mit den Dimensionen: 2x2 und dem Namensarray.":::"1. Schreiben Sie int: int \ n 2. Schreiben Sie den Namen: int array \ n3. Schreiben Sie [ ] [] (zweidimensional): int name [] [] \ n4. Schreiben Sie ein =: int array [] [] = \ n5. Schreiben Sie das neue Schlüsselwort: int array [] [] = new \ n6 Typ: int array [] [] = new int \ n7. Schreiben Sie die Anzahl der Elemente der ersten Dimension: int array [] [] = new int [2] \ n8. Schreiben Sie die Anzahl der Elemente der zweiten Dimension: int array [] [] = new int [2] [2] \ n9. Schreiben Sie ein Semikolon: int array [] [] = new int [2] [2]; "
"multidim_array_access":::"Greifen Sie auf das dritte Element in einem 2x2 int multidimensionalen Array zu: int array [] [] = {{1,2}, {3,4}};":::"1. Notieren Sie den Namen des Arrays: array \ n2. Greifen Sie auf die erste Dimension zu: array [1] \ n3. Greifen Sie auf die zweite Dimension zu: array [1] [0]
"multidim_array_reassignment":::"Ändern Sie den Wert des vierten Elements im 2x3-String-Array" sarr "in" alex "" ":::" 1. Schreiben Sie den Namen des Arrays: sray \ n 2. Schreiben Sie den ersten Index: sray [1] \ n3. Schreiben Sie den zweiten Index: sray [1] [1] \ n4. Schreiben Sie ein =: sray [1] [1] = \ n5. Schreiben Sie den Wert: sray [1] [1] = "alex" \ n6. Schreiben Sie ein Semikolon: sray [1] [1] = "alex"; "
lessson: operators
"arithmetic_operators":::"Addiere die beiden Zahlen 1 und 2 mit dem Operator +.":::"1. Schreibe den ersten Operanden: 1 \ n2. Schreibe ein +: 1 + \ n3. Schreibe den zweiten Operanden: 1 + 2 "
"operators_prefix":::"Fügen Sie eine zu einer int-Variablen hinzu, indem Sie das Präfixinkrement verwenden.":::"1. Schreiben Sie den Operator: ++ \ n2. Schreiben Sie die Variable: ++ a \ n3. Schreiben Sie ein Semikolon: + + a; "
"operators_postfix":::"Fügen Sie eine zu einer int-Variablen hinzu, indem Sie das Postfix-Inkrement verwenden.":::"1. Schreiben Sie die Variable: b \ n2. Schreiben Sie den Operator: b ++ \ n3. Schreiben Sie ein Semikolon: b ++;"
"comparison_operators":::"Vergleichen Sie ein Int- und ein Float-Literal mit dem Operator <.":::"1. Fügen Sie den ersten Operanden (Int) hinzu: 1 \ n2. Fügen Sie den Vergleichsoperator <: 1 <\ n3 hinzu der zweite Operand: 1 <3,0 "
"logic_operators":::"Verbinden Sie zwei boolesche Literale mit dem Operator ||.":::"1. Fügen Sie den ersten Operanden hinzu: true \ n2. Fügen Sie den Operator || true || \ n3. Fügen Sie den zweiten Operanden hinzu: wahr || falsch "
"bitwise_operators":::"Multiplizieren Sie die Variable c mit dem linken Bitverschiebungsoperator << und weisen Sie der Variablen diesen Wert zu.":::"1. Fügen Sie die Variable hinzu: b \ n2. Fügen Sie a =: b = hinzu \ n3. Fügen Sie die Variable hinzu: b = b \ n 4. Fügen Sie die linke Bitverschiebung hinzu: b = b << \ n5. Fügen Sie eine 1 hinzu, um eine Position nach links zu verschieben: b = b << 1 \ n6. Fügen Sie ein Semikolon hinzu: b = b << 1 ;. Was macht das <<? Nehmen wir an, b war 2 (binäre Darstellung: 10). Nach dem Verschieben von 10 um eins nach links wird es zu 100, was 4 in dezimaler Darstellung ist. "
"assignment_operators":::"Multiplizieren Sie eine int-Variable mit drei und weisen Sie ihr diesen Wert mit dem Operator * = zu.":::"1. Fügen Sie die Variable hinzu: a \ n2. Fügen Sie den Operator hinzu: a * = \ n3. Fügen Sie den zweiten Operanden hinzu: a * = 3 \ n4. Fügen Sie ein Semikolon hinzu: a * = 3; "
lesson: statements
"expressions":::"Erstellen Sie einen arithmetischen Ausdruck: A [1] + A [2] * 3 (A ist ein Int-Array, es gibt zwei Operationen, nämlich Summe und Multiplikation).":::"1. Schreiben Sie die erster Operand der Summe: A [1] \ n2. Schreiben Sie den Operator der Summe: A [1] + \ n3. Schreiben Sie den ersten Operanden der Multiplikation: A [1] + A [2] \ n4 Operand der Multiplikation: A [1] + A [2] * \ n5. Schreiben Sie den zweiten Operanden der Multiplikation: A [1] + A [2] * 3 "
"statements":::"Schreiben Sie die Zuweisungsanweisung: b | = 2 * 3;":::"1. Schreiben Sie den Variablennamen: b \ n2. Schreiben Sie den Zuweisungsoperator | =: b | = \ n3 arithmetischer Ausdruck b | = 2 * 3 \ n4. Schreiben Sie ein Semikolon: b | = 2 * 3; "
"code_blocks":::"Schreiben Sie einen neuen Codeblock, der definiert, was in der main-Methode geschieht: public static void main (Zeichenfolge a [])":::"1. Wählen Sie einen gültigen Speicherort für einen Codeblock public static void main (String a []) // hier. \ N 2. Schreiben Sie {am Startort: ​​public static void main (String a []) {\ n 3. Optionale Schreibanweisungen innerhalb des Codeblocks (z. B. "Hallo" mit ausgeben System.out.println () ;: public static void main (String a []) {System.out.println ("Hello!"); \ N 4. Schließen Sie den Codeblock mit einem}: public static void main (String a []) {System.out.println ("Hallo!");} "
lesson: controll_structures
"boolean_expression":::"Einen booleschen Ausdruck erstellen (ein Ausdruck, der einen booleschen Wert ergibt (wahr oder falsch).":::"1 <3"
"if":::"Fügen Sie eine if-Anweisung so ein, dass int x gerade ist.":::"1. Fügen Sie das Schlüsselwort if \ n2 ein. Fügen Sie die Bedingung if (x% 2! = 0) \ n3 ein die Anweisung: if (x% 2! = 0) {x - = 1;} "
"switch":::"Schreiben Sie eine switch-Anweisung, die zwischen den Mitarbeitern eines Unternehmens (Schmidt, Meier und Müller) unterscheidet.":::"1. Schreiben Sie den head: switch (name) {} \ n2. Schreiben Sie den ersten case: switch (name) {case "Schmidt": {System.out.println ("staff");}} \ n 3. Schreiben Sie den zweiten case: switch (name) {case Schmidt ": {System.out.println ("staff");} \ n Fall "Meier": {System.out.println ("staff");}} "\ n 4. Schreiben Sie den dritten Fall: switch (name) {Fall" Schmidt ": {System .out.println ("staff");} \ n case "Meier": {System.out.println ("staff");} \ n case "Mueller": {System.out.println ("staff"); }} "
"while":::"Fügen Sie eine while-Anweisung ein, damit die Ganzzahl x nach ihrer Ausführung kleiner als -10 ist.":::"1. Fügen Sie while \ n ein. 2. Fügen Sie den booleschen Ausdruck ein: while (x> = - 10 ) \ n 3. Fügen Sie die Anweisung ein, um x zu verringern: while (x> = - 10) - x; "}
"do_while":::"Lasse die Variable int i = 0; zähle alle geraden Zahlen von 0 bis 100 auf.":::"1. Add do: do \ n2. Füge die Anweisung hinzu, um i: do {i + = zu erhöhen 2;} \ n 3. Füge hinzu, während: do {i + = 2;} \ n4. Füge den booleschen Ausdruck hinzu: do {i + = 2;} while (i <100) \ n5. Füge ein Semikolon hinzu: do {i + = 2 ;} while (i <100); "
"for":::"Iterieren Sie die Variable i von 1 bis 10.":::"1: Fügen Sie das Schlüsselwort für: für \ n hinzu. 2. Fügen Sie die Variablendefinition hinzu: für (int i = 0; \ n 3. Fügen Sie hinzu der boolesche Ausdruck: for (int i = 0; i <11; \ n 4. Fügen Sie den Zählerausdruck hinzu: for (int i = 0; i <11; i ++)
"extended_for":::"Durchlaufen Sie das Array a. String a [] = {" Bob "," Anna "," Tom "};":::"1. Fügen Sie das Schlüsselwort für: for \ n hinzu. Fügen Sie die Variable hinzu definition: for (String b) \ n 3. Fügen Sie ein ':': for (String b:) \ n hinzu. 4. Fügen Sie einen Array-Zugriff hinzu: for (String b: a) "
"break":::"Schreiben Sie eine break-Anweisung, damit die while-Schleife verlassen wird, wenn die Zahl unter 10 liegt: while (true) {number / = 2;}":::"1. Wählen Sie den richtigen Ort: while ( true) {/ * here / * number / = 2;} \ n2. Schreiben Sie die break-Anweisung: \ nwhile (true) {if (number <10) break; number / = 2;} "
"continue":::"Schreiben Sie eine continue-Anweisung, die die while-Schleife fortsetzt, wenn die Zahl durch 2 teilbar ist: while (number> = 10) {number - = 10;}":::"1. Wählen Sie die richtige Position : while (number> = 10) {// here number - = 10;} 2. Schreiben Sie die break-Anweisung: \ n while (number> = 10) {if (number% 2 == 0) continue; number - = 10 ;} "
lesson: methods
"method_definition":::"Definieren Sie eine Methode mul, die das Produkt aus zwei int zurückgibt.":::"1. Schreiben Sie den Kopf der Methode: public static int mul () {} \ n 2. Schreiben Sie die Parameter: public static int mul (int a, int b) {} \ n 3. Definieren Sie den Body: public static int sum (int a, int b) {return a * b;} "
"method_modifiers":::"Definieren Sie eine Methode, auf die durch Schreiben des Klassennamens zugegriffen werden kann (Name: mul, param: 2 int).":::"1. Wählen Sie die Modifikatoren public static in der Definition: \ npublic static int mul (int a, int b) {return a * b;} "
"method_access":::"Drucken Sie den String" Hello World! "mit System.out.println () aus.":::"1. Geben Sie den Namen der Methode ein: System.out.println (); \ n 2 Fügen Sie das Argument "Hello World!" Ein: System.out.println ("Hello World!"); "
lesson: classes
"class_definition":::"Definiere den Klassenspieler.":::"1. Schreibe das Schlüsselwort class: class \ n 2. Schreibe den Namen der Klasse: class player \ n 3. Schreibe geschweifte Klammern für den Klassentext: Klassenspieler {} "
"inheritance":::"Lassen Sie den Klassenhund von dem Klassensäugetier erben.":::"1. Fügen Sie das Schlüsselwort class: class \ n2 hinzu. Fügen Sie den Klassennamen hinzu: class dog \ n3 Erweitert \ n4. Fügen Sie den Namen der Elternklasse hinzu: Klassenhund erweitert Säugetier \ n5. Hinzufügen {}: Klassenhund erweitert Säugetier {}. "
"class_modifiers":::"Schreiben Sie ein abstraktes Klasse-Spielobjekt":::"1. Verwenden Sie das Schlüsselwort abstract: abstract class Gameobject {public String ID;}"
"access_modifiers":::"Schreiben Sie die Hauptklasse für die Datei player.java":::"1. Verwenden Sie das Schlüsselwort public: public class player {}"
"object_declaration":::"Erstelle das Objekt s der Klasse Square.":::"1. Schreibe den Klassennamen: Square \ n2. Schreibe den Objektnamen: Square s \ n3. Schreibe ein =: Square s = \ n4 Schreiben Sie das neue Schlüsselwort: Square s = new \ n5. Schreiben Sie den Klassennamen erneut: Square s = new Square \ n6. Schreiben Sie (): Square s = new Square () \ n7. Schreiben Sie ein Semikolon: Square s = new Square ( ); "
"class_fields":::"Schreiben Sie den Klassenspieler mit der Mitgliedsvariablen String name.":::"1. Schreiben Sie den Klassenkopf: Klassenspieler {} \ n 2. Schreiben Sie die Klassenmitgliedsvariable in die geschweiften Klammern: Klassenspieler {String name;} "
"member_access_variables":::"Weisen Sie die Variablen-ID des Spielobjekts g aus der Klasse Gameobject neu zu.":::"g.ID =" 1 ";"
"member_access_methods":::"Greifen Sie über die Klasse Gameobject auf die Methode change_id des Spielobjekts g zu.":::"g.change_id (" 1 ");"