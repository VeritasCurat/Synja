lesson: programm_structure
"programm_structure_main":::"Erstelle eine Hauptmethode mit den richtigen Modifikatoren und Parametern.":::"1. Füge den Sichtbarkeitsmodifikator public hinzu: public \n2. Fügen den static Modifikator hinzu: public static \n 3. Füge den Rückgabetyp hinzu: public static void \n 4. Füge den Namen hinzu: public static void main \n 5. Füge die Parameter in Klammern und {} hinzu: public static void main (Zeichenfolge a[]) {} \n Optional:6. Füge Code hinzu, der in der main-Methode ausgeführt werden soll ( Die vorherigen Schritte müssen folgendermaßen ausgeführt werden: public static void main (String a []) {/ * Code * /} "
"programm_structure_import":::"Erstelle eine Importdeklaration, um alles innerhalb des Pakets Java zu importieren.":::"1. Wähle den richtigen Speicherort (nach der package-deklaration). \n2. Füge das Schlüsselwort hinzu: import \n3 Füge das Paket Java hinzu: import java \n4. Füge einen Punkt hinzu: import java. \n5. Füge einen Stern hinzu, um alles in das Paket Java zu importieren: import java.* \n6. Füge ein Semikolon hinzu: import java.*;"
"programm_structure_packages":::"Erstelle eine Paketdeklaration für die Datei project.src.folder1.test.java":::"1. Wähle den richtigen Speicherort (ganz am Anfang). \n2. Gebe das Schlüsselwort ein: package \n 3. Schreibe den Ordnernamen ordner1: paket ordner1; \n 4. Füge einen Punkt hinzu: paket ordner1. \n5. Vervollständigen Sie die Paketdeklaration durch Hinzufügen des Dateinamens test: paket ordner1.test;"
lesson: basics
"comments":::"Kommentar hinzufügen":::"1. Wähle den richtigen Typ (// für einen Einzeiler, /**/ für mehrere Zeilen) \n 2. Schreibe den Kommentar in eine Codezeile: \nint a = 8; //Kommentar"
"literals":::"Initialisiere eine Variable mit einem Literal.":::"1. Wähle die richtige Position (bei der Zuweisung oder Neuzuweisung): int a = HERE; \n 2. Verwende das richtige Literal für den passenden Typ: int a = 8;
"integer_literals":::"":::"3"
"floating-point_literals":::"":::"1.0"
"character_literals":::"Schreibe ein 'r' als Zeichenliteral":::"1. Schreibe ein ':' \n2. Schreibe das Zeichen: 'r \n3. Schreibe erneut ein': 'r'"
"string_literals":::"Schreibe ein "Hallo" als String-Literal.":::"1. Schreibe ein ": "\n2. Schreibe den String Hallo: "Hallo \n3. Schreibe noch einmal ein ": "Hallo""
"boolean_literals":::"":::"true"
"null_literal":::"":::"null"
"keywords":::"Füge das Schlüsselwort "package" hinzu, um dem Code mehr Bedeutung zu verleihen.":::"0. _______ java.Math.*; \1. package java.Math.*;"
"identifiers":::"Nutze einen Bezeichner für eine Variabledefinition.":::"1. Wähle die richtige Position nach dem Typ: int ___; \n 2. Verwende die richtige Syntax: int test;"
"types":::"Es ist wichtig, den richtigen Typ für ein Literal zuzuweisen.":::"Ganzzahlige Literale sind Ganzzahltypen zugeordnet (int, short, long, char, byte). Float-Literale sind Float-Typen zugeordnet (float, double) und String, char und boolean Literale sind jeweils dem gleichnamigen Typ zugeordnet. Das Null-Literal ist etwas Besonderes: Es ist keinem Typ zugeordnet."
"variable_definition":::"Erstellt eine int-Variable.":::"1. Schreibe den Typ: int \n2. Schreibe einen Bezeichner: int var \n3. Schreibe ein Semikolon: int var;"
"variable_definition_initialization":::"Erstelle eine double Variable und initialisiere sie.":::"1. Schreibe das Schlüsselwort: double \n2. Schreibe einen Bezeichner: int d \n3. Schreibe ein "=": int d = \n3 Schreibe ein double-Literal: double d = 1.0D \n4. Schreibe ein Semikolon: double d = 1.0D; "
"variable_access":::"Greife auf die zuvor definierte int-Variable a zu, indem du sie ausdruckst.":::"1. Schreibe den Kontext des Zugriffs: System.out.println(); \n2. Füge die Variable ein: System.out.println(a);"
"variable_reassignment":::"Definiere die Variable a neu.":::"1. Schreibe den Namen der Variablen: a \n2. Schreibe ein "=": a = \n3. Schreibe einen passenden Wert: a = 9 \n 4. Schreibe ein Semikolon: a = 9;"
lesson: arrays
"array_definition":::"Definieren Sie ein int-Array.":::"1. Füge das Schlüsselwort int hinzu: int \n2. Füge den Namen des Arrays hinzu: int a \n3. Füge ein []: int a [] \n4. Füge ein Semikolon hinzu: int a []; "
"array_declaration":::"Definieren Sie ein String-Array mit 5 Elementen.":::"1. Füge den Typ hinzu: String \n2. Füge den Namen hinzu: String-Array \n3. Füge ein []: String-Array [] \n hinzu 4. Füge ein =: String-Array [] = \n5 hinzu. Verwende den Operator new: String-Array [] = new \n6. Schreibe den Typ und die Anzahl der Elemente in eckige Klammern: String-Array [] = new String [5] ; "
"array_definition_initialization":::"Definieren und initialisiere ein int-Array mit 5 Elementen und initialisiere diese mit den Zahlen 1 bis 5.":::"1. Füge den Typ hinzu: int \n2. Füge den Namen hinzu: int array \n3. Add a []: int array [] \n 4. Verwende den Operator =: int array [] = \n5. Schreibe die Werte in geschweifte Klammern, die durch Kommas getrennt sind: int array [] = {1,2,3,4, 5} \n6. Füge ein Semikolon hinzu: int array [] = {1,2,3,4,5}; "
"array_access":::"Greife auf das erste Element des definierten und initialisierten Arrays staff zu: String staff = {" Meier "," Mueller "};":::"1. Notieren Sie den Namen des Arrays: staff \n 2. Greife auf das erste Element (Index: 0) zu: staff [0]; "
"array_reassignment":::"Ordnen Sie das zweite Element des Array-Notensystems mit dem Namen" Miller "neu zu: String staff = {" Meier "," Mueller "};":::"1. Schreibe den Namen des Arrays: staff \n 2. Greife mit eckigen Klammern auf das zweite Element zu (Array-Elemente beginnen mit 0): staff [1] \n 3. Weise dies wie eine String-Variable zu (Haupttyp des Arrays): staff [1] = "Miller"; "
"multidim_array_definition":::"Definiere ein zweidimensionales int-Array mit dem Namen array.":::"1. Schreibe int: int \n 2. Schreibe den Namen: int array \n3. Schreibe [] [] (für 2 dimensional): int name [] [] \n4. Schreibe ein Semikolon: int name [] []; "
"multidim_array_declaration":::"Deklariere ein zweidimensionales int-Array mit den Dimensionen: 2x2 und dem Namensarray.":::"1. Schreibe int: int \n 2. Schreibe den Namen: int array \n3. Schreibe [ ] [] (zweidimensional): int name [] [] \n4. Schreibe ein =: int array [] [] = \n5. Schreibe das neue Schlüsselwort: int array [] [] = new \n6 Typ: int array [] [] = new int \n7. Schreibe die Anzahl der Elemente der ersten Dimension: int array [] [] = new int [2] \n8. Schreibe die Anzahl der Elemente der zweiten Dimension: int array [] [] = new int [2] [2] \n9. Schreibe ein Semikolon: int array [] [] = new int [2] [2]; "
"multidim_array_access":::"Greife auf das dritte Element in einem 2x2 int multidimensionalen Array zu: int array [] [] = {{1,2}, {3,4}};":::"1. Notieren Sie den Namen des Arrays: array \n2. Greife auf die erste Dimension zu: array [1] \n3. Greife auf die zweite Dimension zu: array [1] [0]
"multidim_array_reassignment":::"Ändern Sie den Wert des vierten Elements im 2x3-String-Array" sarr "in" alex "" ":::" 1. Schreibe den Namen des Arrays: sray \n 2. Schreibe den ersten Index: sray [1] \n3. Schreibe den zweiten Index: sray [1] [1] \n4. Schreibe ein =: sray [1] [1] = \n5. Schreibe den Wert: sray [1] [1] = "alex" \n6. Schreibe ein Semikolon: sray [1] [1] = "alex"; "
lessson: operators
"arithmetic_operators":::"Addiere die beiden Zahlen 1 und 2 mit dem Operator +.":::"1. Schreibe den ersten Operanden: 1 \n2. Schreibe ein +: 1 + \n3. Schreibe den zweiten Operanden: 1 + 2 "
"operators_prefix":::"Füge eine zu einer int-Variablen hinzu, indem Sie das Präfixinkrement verwenden.":::"1. Schreibe den Operator: ++ \n2. Schreibe die Variable: ++ a \n3. Schreibe ein Semikolon: + + a; "
"operators_postfix":::"Füge eine zu einer int-Variablen hinzu, indem Sie das Postfix-Inkrement verwenden.":::"1. Schreibe die Variable: b \n2. Schreibe den Operator: b ++ \n3. Schreibe ein Semikolon: b ++;"
"comparison_operators":::"Vergleichen Sie ein Int- und ein Float-Literal mit dem Operator <.":::"1. Füge den ersten Operanden (Int) hinzu: 1 \n2. Füge den Vergleichsoperator <: 1 <\n3 hinzu der zweite Operand: 1 <3,0 "
"logic_operators":::"Verbinden Sie zwei boolesche Literale mit dem Operator ||.":::"1. Füge den ersten Operanden hinzu: true \n2. Füge den Operator || true || \n3. Füge den zweiten Operanden hinzu: wahr || falsch "
"bitwise_operators":::"Multiplizieren Sie die Variable c mit dem linken Bitverschiebungsoperator << und Weise der Variablen diesen Wert zu.":::"1. Füge die Variable hinzu: b \n2. Füge a =: b = hinzu \n3. Füge die Variable hinzu: b = b \n 4. Füge die linke Bitverschiebung hinzu: b = b << \n5. Füge eine 1 hinzu, um eine Position nach links zu verschieben: b = b << 1 \n6. Füge ein Semikolon hinzu: b = b << 1 ;. Was macht das <<? Nehmen wir an, b war 2 (binäre Darstellung: 10). Nach dem Verschieben von 10 um eins nach links wird es zu 100, was 4 in dezimaler Darstellung ist. "
"assignment_operators":::"Multiplizieren Sie eine int-Variable mit drei und Weise ihr diesen Wert mit dem Operator * = zu.":::"1. Füge die Variable hinzu: a \n2. Füge den Operator hinzu: a * = \n3. Füge den zweiten Operanden hinzu: a * = 3 \n4. Füge ein Semikolon hinzu: a * = 3; "
lesson: statements
"expressions":::"Erstelle einen arithmetischen Ausdruck: A [1] + A [2] * 3 (A ist ein Int-Array, es gibt zwei Operationen, nämlich Summe und Multiplikation).":::"1. Schreibe die erster Operand der Summe: A [1] \n2. Schreibe den Operator der Summe: A [1] + \n3. Schreibe den ersten Operanden der Multiplikation: A [1] + A [2] \n4 Operand der Multiplikation: A [1] + A [2] * \n5. Schreibe den zweiten Operanden der Multiplikation: A [1] + A [2] * 3 "
"statements":::"Schreibe die Zuweisungsanweisung: b | = 2 * 3;":::"1. Schreibe den Variablennamen: b \n2. Schreibe den Zuweisungsoperator | =: b | = \n3 arithmetischer Ausdruck b | = 2 * 3 \n4. Schreibe ein Semikolon: b | = 2 * 3; "
"code_blocks":::"Schreibe einen neuen Codeblock, der definiert, was in der main-Methode geschieht: public static void main (Zeichenfolge a [])":::"1. Wähle einen gültigen Speicherort für einen Codeblock public static void main (String a []) // hier. \n 2. Schreibe {am Startort: ​​public static void main (String a []) {\n 3. Optionale Schreibanweisungen innerhalb des Codeblocks (z. B. "Hallo" mit ausgeben System.out.println () ;: public static void main (String a []) {System.out.println ("Hello!"); \n 4. Schließen Sie den Codeblock mit einem}: public static void main (String a []) {System.out.println ("Hallo!");} "
lesson: controll_structures
"boolean_expression":::"Einen booleschen Ausdruck erstellen (ein Ausdruck, der einen booleschen Wert ergibt (wahr oder falsch).":::"1 <3"
"if":::"Füge eine if-Anweisung so ein, dass int x gerade ist.":::"1. Füge das Schlüsselwort if \n2 ein. Füge die Bedingung if (x% 2! = 0) \n3 ein die Anweisung: if (x% 2! = 0) {x - = 1;} "
"switch":::"Schreibe eine switch-Anweisung, die zwischen den Mitarbeitern eines Unternehmens (Schmidt, Meier und Müller) unterscheidet.":::"1. Schreibe den head: switch (name) {} \n2. Schreibe den ersten case: switch (name) {case "Schmidt": {System.out.println ("staff");}} \n 3. Schreibe den zweiten case: switch (name) {case Schmidt ": {System.out.println ("staff");} \n Fall "Meier": {System.out.println ("staff");}} "\n 4. Schreibe den dritten Fall: switch (name) {Fall" Schmidt ": {System .out.println ("staff");} \n case "Meier": {System.out.println ("staff");} \n case "Mueller": {System.out.println ("staff"); }} "
"while":::"Füge eine while-Anweisung ein, damit die Ganzzahl x nach ihrer Ausführung kleiner als -10 ist.":::"1. Füge while \n ein. 2. Füge den booleschen Ausdruck ein: while (x> = - 10 ) \n 3. Füge die Anweisung ein, um x zu verringern: while (x> = - 10) - x; "}
"do_while":::"Lasse die Variable int i = 0; zähle alle geraden Zahlen von 0 bis 100 auf.":::"1. Add do: do \n2. Füge die Anweisung hinzu, um i: do {i + = zu erhöhen 2;} \n 3. Füge hinzu, während: do {i + = 2;} \n4. Füge den booleschen Ausdruck hinzu: do {i + = 2;} while (i <100) \n5. Füge ein Semikolon hinzu: do {i + = 2 ;} while (i <100); "
"for":::"Iterieren Sie die Variable i von 1 bis 10.":::"1: Füge das Schlüsselwort für: für \n hinzu. 2. Füge die Variablendefinition hinzu: für (int i = 0; \n 3. Füge hinzu der boolesche Ausdruck: for (int i = 0; i <11; \n 4. Füge den Zählerausdruck hinzu: for (int i = 0; i <11; i ++)
"extended_for":::"Durchlaufen Sie das Array a. String a [] = {" Bob "," Anna "," Tom "};":::"1. Füge das Schlüsselwort für: for \n hinzu. Füge die Variable hinzu definition: for (String b) \n 3. Füge ein ':': for (String b:) \n hinzu. 4. Füge einen Array-Zugriff hinzu: for (String b: a) "
"break":::"Schreibe eine break-Anweisung, damit die while-Schleife verlassen wird, wenn die Zahl unter 10 liegt: while (true) {number / = 2;}":::"1. Wähle den richtigen Ort: while ( true) {/ * here / * number / = 2;} \n2. Schreibe die break-Anweisung: \nwhile (true) {if (number <10) break; number / = 2;} "
"continue":::"Schreibe eine continue-Anweisung, die die while-Schleife fortsetzt, wenn die Zahl durch 2 teilbar ist: while (number> = 10) {number - = 10;}":::"1. Wähle die richtige Position : while (number> = 10) {// here number - = 10;} 2. Schreibe die break-Anweisung: \n while (number> = 10) {if (number% 2 == 0) continue; number - = 10 ;} "
lesson: methods
"method_definition":::"Definieren Sie eine Methode mul, die das Produkt aus zwei int zurückgibt.":::"1. Schreibe den Kopf der Methode: public static int mul () {} \n 2. Schreibe die Parameter: public static int mul (int a, int b) {} \n 3. Definieren Sie den Body: public static int sum (int a, int b) {return a * b;} "
"method_modifiers":::"Definieren Sie eine Methode, auf die durch Schreiben des Klassennamens zugegriffen werden kann (Name: mul, param: 2 int).":::"1. Wähle die Modifikatoren public static in der Definition: \npublic static int mul (int a, int b) {return a * b;} "
"method_access":::"Drucken Sie den String" Hello World! "mit System.out.println () aus.":::"1. Gebe den Namen der Methode ein: System.out.println (); \n 2 Füge das Argument "Hello World!" Ein: System.out.println ("Hello World!"); "
lesson: classes
"class_definition":::"Definiere den Klassenspieler.":::"1. Schreibe das Schlüsselwort class: class \n 2. Schreibe den Namen der Klasse: class player \n 3. Schreibe geschweifte Klammern für den Klassentext: Klassenspieler {} "
"inheritance":::"Lassen Sie den Klassenhund von dem Klassensäugetier erben.":::"1. Füge das Schlüsselwort class: class \n2 hinzu. Füge den Klassennamen hinzu: class dog \n3 Erweitert \n4. Füge den Namen der Elternklasse hinzu: Klassenhund erweitert Säugetier \n5. Hinzufügen {}: Klassenhund erweitert Säugetier {}. "
"class_modifiers":::"Schreibe ein abstraktes Klasse-Spielobjekt":::"1. Verwende das Schlüsselwort abstract: abstract class Gameobject {public String ID;}"
"access_modifiers":::"Schreibe die Hauptklasse für die Datei player.java":::"1. Verwende das Schlüsselwort public: public class player {}"
"object_declaration":::"Erstelle das Objekt s der Klasse Square.":::"1. Schreibe den Klassennamen: Square \n2. Schreibe den Objektnamen: Square s \n3. Schreibe ein =: Square s = \n4 Schreibe das neue Schlüsselwort: Square s = new \n5. Schreibe den Klassennamen erneut: Square s = new Square \n6. Schreibe (): Square s = new Square () \n7. Schreibe ein Semikolon: Square s = new Square ( ); "
"class_fields":::"Schreibe den Klassenspieler mit der Mitgliedsvariablen String name.":::"1. Schreibe den Klassenkopf: Klassenspieler {} \n 2. Schreibe die Klassenmitgliedsvariable in die geschweiften Klammern: Klassenspieler {String name;} "
"member_access_variables":::"Weise die Variablen-ID des Spielobjekts g aus der Klasse Gameobject neu zu.":::"g.ID =" 1 ";"
"member_access_methods":::"Greife über die Klasse Gameobject auf die Methode change_id des Spielobjekts g zu.":::"g.change_id (" 1 ");"