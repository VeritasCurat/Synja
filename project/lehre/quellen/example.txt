lesson: programm_structure
"programm_structure_main":::"Create a main method with the right modifiers and parameters.":::"1. Add the visibility modifier: public \n2. Add the static modifier: public static\n 3. Add the return: public static void\n 4. Add the name: public static void main \n 5. Add the parameters: public static void main(String a[]){} \n 6. Add code the be run in the main-method (the steps before must be executed like this): public static void main(String a[]){/*Code*/}"
"programm_structure_import":::"Create an import declaration, to import everything everything inside the package java.":::"1. Choose the right location (after the package declaration).\n2. Add the keyword import: import \n3. Specify the package: import java \n4. Add a point: import java. \n5. Add a wildcard to import everything inside the package java: import java.* \n6. Add a semicolon: import java.*;"
"programm_structure_packages":::"Create a package declaration for the file project.src.folder1.test.java":::"1. Choose the right location (at the very beginning). \n2. Write the keyword package: package \n 3. Write the foldername folder1: package folder1; \n 4. Add a point: package folder1. \n5. Complete the package-declaration by adding the filename test: package folder1.test;"
lesson: basics
"comments":::"Add a comment":::"1. Choose the right type (// for a oneliner, /**/ for multiple lines) \n 2. Write the comment: int a = 8; //redundant comment"
"literals":::"Assign a variable with a literal.":::"1. Choose the right location (at assignment or reassignment): int a = HERE; \n 2. Use the right literal for the matching type: int a = 8;"
"integer_literals":::"":::"3"
"floating-point_literals":::"":::"1.0"
"character_literals":::"Write a 'r' as character literal":::"1. Write a ': '\n2. Write the character: 'r \n3. Write an ' again: 'r'"
"string_literals":::"Write a "hello" as String literal.":::"1. Write a ": "\n2. Write a String: "hello \n3. Write a " again: "hello""
"boolean_literals":::"":::"true"
"null_literal":::"":::"null"
"keywords":::"Add the keyword "package" to give the code more meaning.":::"package java.Math.*;"
"identifiers":::"Declare an identifier for a variable.":::"1. Choose the right location after the type: int ___; \n 2. Use the right syntax (identifiers beginn with a _ or a letter): int test;"
"types":::"It is important to associate the right type for a literal.":::"Integer literals are associated with integer types (int, short, long, char, byte), float literals are associated with float types (float, double) and String, char and boolean literals are each associated with the type of the same name. The null literal is special: it isnt associated with a type."
"variable_definition":::"Create an int variable.":::"1. Write the type: int \n2. Write an identifier: int var \n3. Write a semicolon: int var;"
"variable_definition_initialization":::"Create a double variable and initialize it.":::"1. Write the keyword: double \n2. Write a identifier: int d \n3. Write a "=": int d = \n3. Write a double literal: double d = 1.0D \n4. Write a semicolon: double d = 1.0D;"
"variable_access":::"Access the int variable a that was defined before by printing it out.":::"1. Write the context of the access: System.out.println(); \n2. Insert the variable: System.out.println(a);"
"variable_reassignment":::"Redefine the variable a.":::"1. Write the name of the variable: a \n2. Write a "=" : a = \n3. Write a matching value: a = 9\n 4. Write a semicolon: a = 9;"
lesson: arrays
"array_definition":::"Define an int array.":::"1. Add the int keyword: int\n2. Add the name of the array: int a\n3. Add a []: int a[]\n4. Add a semicolon: int a[];"
"array_declaration":::"Define a String Array with 5 elements.":::"1. Add the type: String \n2. Add the name: String array\n3. Add a []: String array[]\n 4. Add a =: String array[] =\n5. Use the operator new: String array[] = new \n6.Write thet ype and the number of elements in square brackets: String array[] = new String[5];"
"array_definition_initialization":::"Define and initialize an int array with 5 elements and initialize these with the number 1 to 5.":::"1. Add the type: int \n2. Add the name: int array\n3. Add a []: int array[]\n 4. Use the operator = : int array[] =  \n5. Write the values in curly brackets, seperated by commas: int array[] = {1,2,3,4,5} \n6. Add a semicolon: int array[] = {1,2,3,4,5};"
"array_access":::"Access the first element of the defined and initialized array staff: String staff = {"Meier", "Mueller"};":::"1. Write down the name of the array: staff \n 2. Access the first element (index: 0): staff[0];"
"array_reassignment":::"Reassign the seconde element of the array staff with the name "Miller": String staff = {"Meier", "Mueller"};":::"1. Write the name of the array: staff \n 2. Access the second element with square brackets (array elements begin with 0): staff[1] \n 3. Reassign this like a String variable (maintype of the array): staff[1] = "Miller";"
"multidim_array_definition":::"Define a twodimensional int array with the name array.":::"1. Write int: int\n 2. Write the name: int array\n3. Write [][] (for 2 dimensional): int name[][]\n4. Write a semicolon: int name[][];"
"multidim_array_declaration":::"Declare a two dimensional int array with the dimensions: 2x2 and the name array.":::"1. Write int: int\n 2. Write the name: int array\n3. Write [][] (for two-dimensional): int name[][]\n4. Write a =: int array[][] =\n5. Write the new keyword: int array[][] = new\n6. Write the type: int array[][] = new int\n7. Write the number of elements of the first dimension: int array[][] = new int[2]\n8. Write the number of elements of the second dimension: int array[][] = new int[2][2]\n9. Write a semicolon: int array[][] = new int[2][2];"
"multidim_array_access":::"Access the third element in a 2x2 int multidim array: int array[][] = {{1,2},{3,4}};":::"1. Write down the name of the array: array \n2. Access the first dimension: array[1] \n3. Access the seconds dimension: array[1][0]"
"multidim_array_reassignment":::"Change the value of the fourth element in the 2x3 String array "sarr" to "alex""":::"1. Write the name of the array: sray\n 2. Write the first index: sray[1]\n3. Write the second index: sray[1][1]\n4. Write a = : sray[1][1] =\n5. Write the value: sray[1][1] = "alex"\n6. Write a semicolon: sray[1][1] = "alex";"
lesson: operators
"arithmetic_operators":::"Sum the two numbers 1 and 2 by using the + operator.":::"1. Write the first operand: 1\n2. Write a +: 1 + \n3. Write the second operand: 1 + 2"
"operators_prefix":::"Add one to a int variable by using the prefix increment.":::"1. Write the operator: ++\n2. Write the variable: ++a \n3. Write a semicolon: ++a;"
"operators_postfix":::"Add one to a int variable by using the postfix increment.":::"1. Write the variable: b \n2. Write the operator: b++ \n3. Write a semicolon: b++;"
"comparison_operators":::"Compare a int and a float literal using the < operator.":::"1. Add the first operand (int): 1 \n2. Add the comparison operator <: 1 < \n3. Add the second operand: 1 < 3.0"
"logic_operators":::"Connect two boolean literals with the || operator.":::"1. Add the first operand: true \n2. Add the || operator: true || \n3. Add the second operand: true || false"
"bitwise_operators":::"Use the left bitshift operator << to multiply the variable c by 2 and assign this value to the variable.":::"1. Add the variable: b\n2. Add a = : b = \n3. Add the variable: b = b\n 4. Add the left bitshift: b = b << \n5. Add a 1 to bitshift one to the left: b = b << 1\n6. Add a semicolon: b = b << 1;. What does the << do? Lets say b was 2 (binary representation: 10). After shifting 10 one to the left: its 100 which is 4 in decimal representation."
"assignment_operators":::"Multiply an int variable by three and assign that value to it using the *= operator.":::"1. Add the variable: a\n2. Add the operator: a *= \n3. Add the second operand: a *= 3\n4. Add a semicolon: a *= 3;"
lesson: statements
"expressions":::"Create a arithmetic expression: A[1] + A[2]*3 (A is an int array, there are two operations a sum and a multiplication).":::"1. Write the first operand of the sum: A[1]\n2. Write the operator of the sum: A[1] +\n3. Write the first operand of the multiplication: A[1] + A[2] \n4. Write the operand of the multiplication: A[1] + A[2]* \n5. Write the second operand of the multiplication: A[1] + A[2]*3"
"statements":::"Write the assignment statement: b |= 2*3;":::"1. Write the variable name: b \n2. Write the assignments operator |=: b |= \n3. Write the arithmetic expression b |= 2*3 \n4. Write a semicolon: b |= 2*3;"
"code_blocks":::"Write a new Codeblock that defines what happens inside the main method: public static void main(String a[])":::"1. Choose a valid location for a code block public static void main(String a[])//here. \n 2. Write { at the starting location:  public static void main(String a[]){ \n 3. Optional write statements inside the codeblock (e.g. print "Hello" with System.out.println();: public static void main(String a[]){System.out.println("Hello!"); \n 4. Close the code block with a }: public static void main(String a[]){System.out.println("Hello!");}"
lesson: controll_structures
"boolean_expression":::"Create a boolean expression (a expression that evaluates to a boolean value (true or false).":::"1 < 3"
"if":::"Insert a if statement so that int x is even. ":::"1. Insert the keyword: if \n2. Insert the condition: if(x % 2 != 0) \n3. Insert the statement: if(x % 2 != 0){x -= 1;}"
"switch":::"Write a switch statement, that discriminates between the staff of a company (Schmidt, Meier and Mueller).":::"1. Write the head: switch(name){} \n2. Write the first case: switch(name){case "Schmidt":{System.out.println("staff");}} \n 3. Write the second case: switch(name){case Schmidt":{System.out.println("staff");} \n case "Meier":{System.out.println("staff");}}" \n  4. Write the third case: switch(name){case "Schmidt":{System.out.println("staff");} \n case "Meier":{System.out.println("staff");} \n case "Mueller":{System.out.println("staff");}}"
"while":::"Insert a while statement so that the integer x is lower than -10 after its execution.":::"1. Insert while \n 2. Insert the boolean expression: while(x>=-10) \n 3. Insert the statement to decrease x: while(x>=-10)--x;"}
"do_while":::"Let the variable int i=0; enumerate all the straight numbers from 0 to 100.":::"1. Add do: do \n2. Add the statement to increase i: do{i+=2;} \n 3. Add while: do{i+=2;} \n4. Add the boolean expression: do{i+=2;} while(i<100) \n5. Add a semicolon:  do{i+=2;} while(i<100);"
"for":::"Iterate the variable i from 1 to 10.":::"1: Add a for: for \n 2. Add the variable definition: for(int i=0; \n 3. Add the boolean expression: for(int i=0;i<11; \n 4. Add the counter expression: for(int i=0;i<11;i++)"
"extended_for":::"Iterate through the array a. String a[] = {"Bob", "Anna", "Tom"};":::"1. Add the keyword for: for \n Add the variable definition: for(String b) \n 3. Add a ':': for(String b : ) \n 4. Add a array access: for(String b : a)"
"break":::"Write a break statement so that while-loop is left if the number is under 10: while(true){number /= 2;}":::"1. Choose the right location: while(true){/*here/* number /= 2;} \n2. Write the break statement:\nwhile(true){if(number < 10)break; number /= 2;}"
"continue":::"Write a continue statement that continues the while-loop if the number is divisible by 2: while(number >= 10){number -= 10;}":::"1. Choose the right location: while(number >= 10){//here number -= 10;} 2. Write the break statement:\n while(number >= 10){if(number%2 == 0)continue; number -= 10;}"
lesson: methods
"method_definition":::"Define a method mul that returns the product of two int.":::"1. Write the head of the method: public static int mul(){} \n 2. Write the parameters: public static int mul(int a, int b){} \n 3. Define the body: public static int sum(int a, int b){return a*b;}"
"method_modifiers":::"Define a method that can be accessed by writing the classname (name: mul, param: 2 int).":::"1. Choose the modifiers public static in the definition: \npublic static int mul(int a, int b){return a*b;}"
"method_access":::"Print out the String "Hello World!" with System.out.println().":::"1. Write the name of the method: System.out.println(); \n 2. Insert the argument "Hello World!": System.out.println("Hello World!");"
lesson: classes
"class_definition":::"Define the class player.":::"1. Write the keyword class: class \n 2. Write the name of the class: class player \n 3. Write curly brackets for the class body: class player {}"
"inheritance":::"Let the class dog inherit from the class mammal.":::"1. Add the keyword class: class \n2. Add the class name: class dog \n3. Add the keywords extends: class dog extends \n4. Add the name of the parent class: class dog extends mammal \n5. Add {}: class dog extends mammal{}."
"class_modifiers":::"Write a abstract class Gameobject":::"1. Use the keyword abstract: abstract class Gameobject{public String ID;}"
"access_modifiers":::"Write the main class for the file player.java":::"1. Use the keyword public: public class player {}"
"object_declaration":::"Create the object s of the class Square.":::"1. Write the classname: Square\n2. Write the objectname: Square s\n3. Write a =: Square s = \n4. Write the new keyword: Square s = new\n5. Write the classname again: Square s = new Square \n6. Write (): Square s = new Square() \n7. Write a semicolon: Square s = new Square();"
"class_fields":::"Write the class player with member variable String name.":::"1. Write the class head: class player {} \n 2. Write the class member variable inside the curly brackets: class player {String name;}"
"member_access_variables":::"Reassign the variable ID of the gameobject g from the class Gameobject.":::"g.ID = "1";"
"member_access_methods":::"Access the method change_id of the gameobject g from the class Gameobject.":::"g.change_id("1");"
