lesson: programm_structure
"programm_structure_main":::"package src;\nimport java.lang.*;\npublic class Test {\n	public static void main(String[] args) {\n		System.out.println("Hello, World!");\n	}\n}\n":::["public static void main(String[] args) {\n		System.out.println("Hello, World!");\n	}\n"]
"programm_structure_import":::"package src;\nimport java.lang.*;\npublic class Test {\n	public static void main(String[] args) {\n		System.out.println("Hello, World!");\n	}\n}\n":::["import java.lang.*;"]
"programm_structure_packages":::"package src;\nimport java.lang.*;\npublic class Test {\n	public static void main(String[] args) {\n		System.out.println("Hello, World!");\n	}\n}\n":::["package src;\n"]
lesson: basics
"identifiers":::"package src;\npublic class Test_Basics {\n	public static void main(String[] args) {\n		for(int p=2; p<100; p=p+1) {\n			for(int i=2; i<=p; i=i+1) {\n				if(p%i == 0) {\n					if(i == p) {\n						System.out.println("prime: "+p);\n					}\n					break;\n				}\n			}\n		}\n	}\n}\n":::["src"::"Test_Basics"::"main"::"args"::"p"::"i"::"System"::"out"::"println"]
"keywords":::"package src;\npublic class Test_Basics {\n	public static void main(String[] args) {\n		for(int p=2; p<100; p=p+1) {\n			for(int i=2; i<=p; i=i+1) {\n				if(p%i == 0) {\n					if(i == p) {\n						System.out.println("prime: "+p);\n					}\n					break;\n				}\n			}\n		}\n	}\n}\n":::["package"::"public"::"class"::"static"::"void"::"for"::"int"::"if"::"break"]
"types":::"package src;\npublic class Test_Basics {\n	public static void main(String[] args) {\n		for(int p=2; p<100; p=p+1) {\n			for(int i=2; i<=p; i=i+1) {\n				if(p%i == 0) {\n					if(i == p) {\n						System.out.println("prime: "+p);\n					}\n					break;\n				}\n			}\n		}\n	}\n}\n":::["String"::"int"(2)]
"variable_definition":::"package src;\npublic class Test_Basics {\n	public static void main(String[] args) {\n		for(int p=2; p<100; p=p+1) {\n			int i;\n			for(i=2; i<=p; i=i+1) {\n				if(p%i == 0) {\n					if(i == p) {\n						System.out.println("prime: "+p);\n					}\n					break;\n				}\n			}\n		}\n	}\n}\n":::["int i;"]
"variable_definition_initialization":::"package src;\npublic class Test_Basics {\n	public static void main(String[] args) {\n		for(int p=2; p<100; p=p+1) {\n			for(int i=2; i<=p; i=i+1) {\n				if(p%i == 0) {\n					if(i == p) {\n						System.out.println("prime: "+p);\n					}\n					break;\n				}\n			}\n		}\n	}\n}\n":::["int p=2;"]
"variable_access":::"package src;\npublic class Test_Basics {\n	public static void main(String[] args) {\n		for(int p=2; p<100; p=p+1) {\n			int i;\n			for(i=2; i<=p; i=i+1) {\n				if(p%i == 0) {\n					if(i == p) {\n						System.out.println("prime: "+p);\n					}\n					break;\n				}\n			}\n		}\n	}\n}\n":::["p<100"::"p=p+1"::"i<=p"::"i=i+1"::"p%i == 0"::"i == p"::"System.out.println("prime: "+p);"]
"variable_reassignment":::"package src;\npublic class Test_Basics {\n	public static void main(String[] args) {\n		for(int p=2; p<100; p=p+1) {\n			int i;\n			for(i=2; i<=p; i=i+1) {\n				if(p%i == 0) {\n					if(i == p) {\n						System.out.println("prime: "+p);\n					}\n					break;\n				}\n			}\n		}\n	}\n}\n":::["i=i+1"::"p=p+1"]
"literals":::""package src;\npublic class Test_Basics {\n	public static void main(String[] args) {\n		for(int p=2; p<100; p=p+1) {\n			int i;\n			for(i=2; i<=p; i=i+1) {\n				if(p%i == 0) {\n					if(i == p) {\n						System.out.println("prime: "+p);\n					}\n					break;\n				}\n			}\n		}\n	}\n}\n":::["i=i+1"::"p=p+1"]":::["2"::"100"::"1"::"0"::"prime: "]
"integer_literals":::""package src;\npublic class Test_Basics {\n	public static void main(String[] args) {\n		for(int p=2; p<100; p=p+1) {\n			int i;\n			for(i=2; i<=p; i=i+1) {\n				if(p%i == 0) {\n					if(i == p) {\n						System.out.println("prime: "+p);\n					}\n					break;\n				}\n			}\n		}\n	}\n}\n":::["i=i+1"::"p=p+1"]":::["2"::"100"::"1"::"0"]
"floating-point_literals":::"package src;\npublic class Test_Basics {\n	public static void main(String[] args) {\n		//this is a character\n		char P = 'p';\n		char I = 'i';\n		double pi = 0.0+Math.PI;		\n		System.out.println(P+I+" is not "+pi+": "+(P+I==pi));\n	}\n}\n":::["0.0"]
"character_literals":::"package src;\npublic class Test_Basics {\n	public static void main(String[] args) {\n		//this is a character\n		char P = 'p';\n		char I = 'i';\n		double pi = 0.0+Math.PI;		\n		System.out.println(P+I+" is not "+pi+": "+(P+I==pi));\n	}\n}\n":::["'p'"::"'i'"]
"string_literals":::""package src;\npublic class Test_Basics {\n	public static void main(String[] args) {\n		for(int p=2; p<100; p=p+1) {\n			int i;\n			for(i=2; i<=p; i=i+1) {\n				if(p%i == 0) {\n					if(i == p) {\n						System.out.println("prime: "+p);\n					}\n					break;\n				}\n			}\n		}\n	}\n}\n":::["i=i+1"::"p=p+1"]":::["prime: "]
"boolean_literals":::"package src;\npublic class Test_Basics {\n	public static void main(String[] args) {\n		//this is a character\n		char P = 'p';\n		char I = 'i';\n		double pi = 0.0+Math.PI;		\n		System.out.println(P+I+" is not "+pi+": "+false);\n	}\n}\n":::["false"]
"null_literal":::"package src;\npublic class Test_Basics {\n	public static void main(String[] args) {\n		//this is a character\n		char P = 'p';\n		char I = 'i';\n		double pi = 0.0+Math.PI;		\n		System.out.println(P+I+" is not "+pi+": "+false);\n		System.out.println(null==null);\n	}\n}\n":::["null"]
"comments":::"package src;\npublic class Test_Basics {\n	public static void main(String[] args) {\n		//this is a character\n		char P = 'p';\n		char I = 'i';\n		double pi = 0.0+Math.PI;		\n		System.out.println(P+I+" is not "+pi+": "+false);\n		System.out.println(null==null);\n	}\n}\n":::["//this is a character"]
lesson: operators
"arithmetic_operators":::"package src;\npublic class Test_Operators {\n	public static void main(String[] args) {\n		int straight = 3 + 5 % 2;\n		double odd = ++straight;\n		if(straight%2 == 0 && odd%2==1)straight = (int)odd<<2;\n		System.out.println("unequal: "+(straight != ((straight+++--straight)>>2)));\n	}\n}\n":::["+"::"%"]
"operators_prefix":::"package src;\npublic class Test_Operators {\n	public static void main(String[] args) {\n		int straight = 3 + 5 % 2;\n		double odd = ++straight;\n		if(straight%2 == 0 && odd%2==1)straight = (int)odd<<2;\n		System.out.println("unequal: "+(straight != ((straight+++--straight)>>2)));\n	}\n}\n":::["--"]
"operators_postfix":::"package src;\npublic class Test_Operators {\n	public static void main(String[] args) {\n		int straight = 3 + 5 % 2;\n		double odd = ++straight;\n		if(straight%2 == 0 && odd%2==1)straight = (int)odd<<2;\n		System.out.println("unequal: "+(straight != ((straight+++--straight)>>2)));\n	}\n}\n":::["++"]
"comparison_operators":::"package src;\npublic class Test_Operators {\n	public static void main(String[] args) {\n		int straight = 3 + 5 % 2;\n		double odd = ++straight;\n		if(straight%2 == 0 && odd%2==1)straight = (int)odd<<2;\n		System.out.println("unequal: "+(straight != ((straight+++--straight)>>2)));\n	}\n}\n":::["=="]
"logic_operators":::"package src;\npublic class Test_Operators {\n	public static void main(String[] args) {\n		int straight = 3 + 5 % 2;\n		double odd = ++straight;\n		if(straight%2 == 0 && odd%2==1)straight = (int)odd<<2;\n		System.out.println("unequal: "+(straight != ((straight+++--straight)>>2)));\n	}\n}\n":::["&&"]
"bitwise_operators":::"package src;\npublic class Test_Operators {\n	public static void main(String[] args) {\n		int straight = 3 + 5 % 2;\n		double odd = ++straight;\n		if(straight%2 == 0 && odd%2==1)straight = (int)odd<<2;\n		System.out.println("unequal: "+(straight != ((straight+++--straight)>>2)));\n	}\n}\n":::["<<"::">>"]
"assignment_operators":::"package src;\npublic class Test_Operators {\n	public static void main(String[] args) {\n		int straight = 3 + 5 % 2;\n		double odd = ++straight;\n		if(straight%2 == 0 && odd%2==1)straight = (int)odd<<2;\n		System.out.println("unequal: "+(straight != ((straight+++--straight)>>2)));\n	}\n}\n":::["="]
lesson: controll_structures
"boolean_expression":::"package src;\npublic class Test_controll_structures {\n	public static void main(String[] args) {\n		for(;;)if(true)break;\n		for(String a: args)System.out.println(a);\n		if(args.length > 0) {			\n			switch(args[0]) {default:;};\n		}\n		while(true)continue;\n	}\n}\n":::["true"]
"if":::"package src;\npublic class Test_controll_structures {\n	public static void main(String[] args) {\n		for(;;)if(true)break;\n		for(String a: args)System.out.println(a);\n		if(args.length > 0) {			\n			switch(args[0]) {default:;};\n		}\n		while(true)continue;\n	}\n}\n":::["if(true)break;"::"if(args.length > 0) {			\n			switch(args[0]) {default:;};\n		}\n"]
"switch":::"package src;\npublic class Test_controll_structures {\n	public static void main(String[] args) {\n		for(;;)if(true)break;\n		for(String a: args)System.out.println(a);\n		if(args.length > 0) {			\n			switch(args[0]) {default:;};\n		}\n		while(true)continue;\n	}\n}\n":::["switch(args[0]) {default:;};"]
"while":::"package src;\npublic class Test_controll_structures {\n	public static void main(String[] args) {\n		for(;;)if(true)break;\n		for(String a: args)System.out.println(a);\n		if(args.length > 0) {			\n			switch(args[0]) {default:;};\n		}\n		while(true)continue;\n	}\n}\n":::["while(true)continue;"]
"do_while":::"package src;\npublic class Test_controll_structures {\n	public static void main(String[] args) {\n		for(;;)if(true)break;\n		for(String a: args)System.out.println(a);\n		if(args.length > 0) {			\n			switch(args[0]) {default:;};\n		}\n		do{while(true)continue;}while(false);\n	}\n}\n":::["do{while(true)continue;}while(false);"]
"for":::"package src;\npublic class Test_controll_structures {\n	public static void main(String[] args) {\n		for(;;)if(true)break;\n		for(String a: args)System.out.println(a);\n		if(args.length > 0) {			\n			switch(args[0]) {default:;};\n		}\n		while(true)continue;\n	}\n}\n":::["for(;;)if(true)break;"]
"extended_for":::"package src;\npublic class Test_controll_structures {\n	public static void main(String[] args) {\n		for(;;)if(true)break;\n		for(String a: args)System.out.println(a);\n		if(args.length > 0) {			\n			switch(args[0]) {default:;};\n		}\n		while(true)continue;\n	}\n}\n":::["for(String a: args)System.out.println(a);"]
"break":::"package src;\npublic class Test_controll_structures {\n	public static void main(String[] args) {\n		for(;;)if(true)break;\n		for(String a: args)System.out.println(a);\n		if(args.length > 0) {			\n			switch(args[0]) {default:;};\n		}\n		while(true)continue;\n	}\n}\n":::[break;]
"continue":::"package src;\npublic class Test_controll_structures {\n	public static void main(String[] args) {\n		for(;;)if(true)break;\n		for(String a: args)System.out.println(a);\n		if(args.length > 0) {			\n			switch(args[0]) {default:;};\n		}\n		while(true)continue;\n	}\n}\n":::[continue;]
lesson: statements
"expressions":::"":::[""]
"statements":::"":::[""]
"code_blocks":::"package src;\npublic class Test_Basics {\n	public static void main(String[] args) {\n		for(int p=2; p<100; p=p+1) {\n			for(int i=2; i<=p; i=i+1) {\n				if(p%i == 0) {\n					if(i == p) {\n						System.out.println("prime: "+p);\n					}\n					break;\n				}\n			}\n		}\n	}\n}\n":::["{\n	public static void main(String[] args) {\n		for(int p=2; p<100; p=p+1) {\n			for(int i=2; i<=p; i=i+1) {\n				if(p%i == 0) {\n					if(i == p) {\n						System.out.println("prime: "+p);\n					}\n					break;\n				}\n			}\n		}\n	}\n}\n"::"{\n		for(int p=2; p<100; p=p+1) {\n			for(int i=2; i<=p; i=i+1) {\n				if(p%i == 0) {\n					if(i == p) {\n						System.out.println("prime: "+p);\n					}\n					break;\n				}\n			}\n		}\n	}\n"::"{\n			for(int i=2; i<=p; i=i+1) {\n				if(p%i == 0) {\n					if(i == p) {\n						System.out.println("prime: "+p);\n					}\n					break;\n				}\n			}\n"::"{\n				if(p%i == 0) {\n					if(i == p) {\n						System.out.println("prime: "+p);\n					}\n					break;\n				}\n"::"{\n						System.out.println("prime: "+p);\n					}\n					break;\n				}\n"]
lesson: methods
"method_modifiers":::"package src;\npublic class Test_Methods {\n	public static void main(String[] args) {\n		System.out.println(quersumme(-123));\n	}\n	public static int quersumme(int a) {\n		int q = 0;\n		while(a!=0) {\n			q+=a%10;\n			a=(a-q)/10;\n		}\n		return q;\n	}\n}\n":::["public"::"static"]
"method_definition":::"package src;\npublic class Test_Methods {\n	public static void main(String[] args) {\n		System.out.println(quersumme(-123));\n	}\n	public static int quersumme(int a) {\n		int q = 0;\n		while(a!=0) {\n			q+=a%10;\n			a=(a-q)/10;\n		}\n		return q;\n	}\n}\n":::["public static int quersumme(int a) {\n		int q = 0;\n		while(a!=0) {\n			q+=a%10;\n			a=(a-q)/10;\n		}\n		return q;\n	}\n}"]
"method_access":::"package src;\npublic class Test_Methods {\n	public static void main(String[] args) {\n		System.out.println(quersumme(-123));\n	}\n	public static int quersumme(int a) {\n		int q = 0;\n		while(a!=0) {\n			q+=a%10;\n			a=(a-q)/10;\n		}\n		return q;\n	}\n}\n":::["quersumme(-123)"]
lesson: arrays
"array_definition":::"":::["int primes20[];"]
"array_definition_initialization":::"":::["int primes10[] = {2,3,5,7};"::"primes20 = new int[8];"]
"array_reassignment":::"":::["primes20[p] = primes10[p];"::"primes20[4] = 11; primes20[5] = 13; primes20[6] = 17; primes20[7] = 19;"]
"array_reassignment":::"":::["primes20[4] = 11; primes20[5] = 13; primes20[6] = 17; primes20[7] = 19;"]
"array_access":::"":::["primes20[p]"::"primes10[p]"::"primes20[4]"::"primes20[5]"::"primes20[6]"::"primes20[7]"]
lesson: classes
"class_modifiers":::"package src;\npublic class Test_Classes {\n	public static void main(String[] args) {\n		Square m = new Square();\n		System.out.println(m.square(3));\n	}\n}\nclass Square{\n	int square;\n	public int square(int i) {return i*i;}\n}\n":::["public"] 
"access_modifiers":::"package src;\npublic class Test_Classes {\n	public static void main(String[] args) {\n		Square m = new Square();\n		System.out.println(m.square(3));\n	}\n}\nclass Square{\n	int square;\n	public int square(int i) {return i*i;}\n}\n":::["public"]
"class_definition":::"package src;\npublic class Test_Classes {\n	public static void main(String[] args) {\n		Square m = new Square();\n		System.out.println(m.square(3));\n	}\n}\nclass Square{\n	int square;\n	public int square(int i) {return i*i;}\n}\n":::["class Square{\n	int square;\n	public int square(int i) {return i*i;}\n}\n"]
"class_fields":::"package src;\npublic class Test_Classes {\n	public static void main(String[] args) {\n		Square m = new Square();\n		System.out.println(m.square(3));\n	}\n}\nclass Square{\n	int square;\n	public int square(int i) {return i*i;}\n}\n":::["int square;"]
"member_access_variables":::"package src;\npublic class Test_Classes {\n	public static void main(String[] args) {\n		Square m = new Square();\n		System.out.println(m.square(3));\n	}\n}\nclass Square{\n	int square;\n	public int square(int i) {return i*i;}\n}\n":::["m.square(3)"]
"member_access_methods":::"package src;\npublic class Test_Classes {\n	public static void main(String[] args) {\n		Square m = new Square();\n		System.out.println(m.square(3));\n	}\n}\nclass Square{\n	int square;\n	public int square(int i) {return i*i;}\n}\n":::[]